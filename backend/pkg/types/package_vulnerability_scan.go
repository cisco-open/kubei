// Copyright Â© 2022 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package types

import (
	"github.com/openclarity/kubeclarity/api/server/models"
	runtime_scan_models "github.com/openclarity/kubeclarity/runtime_scan/api/server/models"
)

type PackageVulnerabilityScan struct {

	// cvss
	Cvss *CVSS `json:"cvss,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fix version
	FixVersion string `json:"fixVersion,omitempty"`

	// links
	Links []string `json:"links"`

	// package
	Package *PackageInfo `json:"package,omitempty"`

	// scanners
	Scanners []string `json:"scanners"`

	// severity
	Severity VulnerabilitySeverity `json:"severity,omitempty"`

	// vulnerability name
	VulnerabilityName string `json:"vulnerabilityName,omitempty"`
}

func PackageVulnerabilityScanFromRuntimeScan(in *runtime_scan_models.PackageVulnerabilityScan) *PackageVulnerabilityScan {
	return &PackageVulnerabilityScan{
		Cvss:              cvssFromRuntimeScan(in.Cvss),
		Description:       in.Description,
		FixVersion:        in.FixVersion,
		Links:             in.Links,
		Package:           PkgFromRuntimeScan(in.Package),
		Scanners:          in.Scanners,
		Severity:          VulnerabilitySeverity(in.Severity),
		VulnerabilityName: in.VulnerabilityName,
	}
}

func PackageVulnerabilitiesFromRuntimeScan(in []*runtime_scan_models.PackageVulnerabilityScan) []*PackageVulnerabilityScan {
	ret := make([]*PackageVulnerabilityScan, len(in))
	for i, scan := range in {
		ret[i] = PackageVulnerabilityScanFromRuntimeScan(scan)
	}
	return ret
}

func PackageVulnerabilityScanFromBackendAPI(in *models.PackageVulnerabilityScan) *PackageVulnerabilityScan {
	return &PackageVulnerabilityScan{
		Cvss:              cvssFromBackendAPI(in.Cvss),
		Description:       in.Description,
		FixVersion:        in.FixVersion,
		Links:             in.Links,
		Package:           PkgFromBackendAPI(in.Package),
		Scanners:          in.Scanners,
		Severity:          VulnerabilitySeverity(in.Severity),
		VulnerabilityName: in.VulnerabilityName,
	}
}

func PackageVulnerabilitiesScanFromBackendAPI(in []*models.PackageVulnerabilityScan) []*PackageVulnerabilityScan {
	ret := make([]*PackageVulnerabilityScan, len(in))
	for i, scan := range in {
		ret[i] = PackageVulnerabilityScanFromBackendAPI(scan)
	}
	return ret
}
