// Copyright Â© 2022 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package database

import (
	"fmt"
	"time"

	"github.com/go-openapi/strfmt"
	log "github.com/sirupsen/logrus"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"

	"github.com/openclarity/kubeclarity/api/server/models"
	"github.com/openclarity/kubeclarity/api/server/restapi/operations"
)

const (
	newVulnerabilityTableName  = "new_vulnerabilities"
	newVulnerabilitiesViewName = "new_vulnerabilities_view" // nolint:gosec

	// NOTE: when changing one of the column names change also the gorm label in NewVulnerability.
	columnNewVulID      = "id"
	columnNewVulAddedAt = "added_at"
)

type NewVulnerability struct {
	ID string `gorm:"primarykey"` // consists of the vulnerability ID + package ID (PkgVulID)

	VulID   string    `json:"vul_id,omitempty" gorm:"column:vul_id"`
	AddedAt time.Time `json:"added_at,omitempty" gorm:"column:added_at" faker:"-"`
}

type NewVulnerabilityView struct {
	AddedAt time.Time `json:"added_at,omitempty" gorm:"column:added_at" faker:"-"`
	SeverityCounters
}

type NewVulnerabilityTable interface {
	Create(vul *NewVulnerability) error
	CreateNewVulnerabilitiesTrends(application *Application) error
	GetNewVulnerabilitiesTrends(params operations.GetDashboardTrendsVulnerabilitiesParams) ([]*models.NewVulnerabilitiesTrend, error)
}

type NewVulnerabilityTableHandler struct {
	newVulnerabilitiesTable *gorm.DB
	newVulnerabilitiesView  *gorm.DB
}

func (NewVulnerability) TableName() string {
	return newVulnerabilityTableName
}

func (v *NewVulnerabilityTableHandler) Create(vul *NewVulnerability) error {
	if err := v.newVulnerabilitiesTable.Create(vul).Error; err != nil {
		return fmt.Errorf("failed to create new vulnerability: %v", err)
	}

	return nil
}

func (v *NewVulnerabilityTableHandler) GetNewVulnerabilitiesTrends(params operations.GetDashboardTrendsVulnerabilitiesParams) ([]*models.NewVulnerabilitiesTrend, error) {
	tx := v.newVulnerabilitiesView

	var views []NewVulnerabilityView

	if err := tx.Where(CreateTimeFilter(columnNewVulAddedAt, params.StartTime, params.EndTime)).Order(columnNewVulAddedAt + " asc").
		Scan(&views).Error; err != nil {
		return nil, fmt.Errorf("failed to get scan results: %v", err)
	}

	newVulnerabilitiesTrends := make([]*models.NewVulnerabilitiesTrend, len(views))
	for i, view := range views {
		newVulnerabilitiesTrends[i] = &models.NewVulnerabilitiesTrend{
			NumOfVuls: getVulnerabilityCount(view.SeverityCounters),
			Time:      strfmt.DateTime(view.AddedAt),
		}
	}

	return newVulnerabilitiesTrends, nil
}

func (v *NewVulnerabilityTableHandler) CreateNewVulnerabilitiesTrends(application *Application) error {
	// Mapping new vulnerabilities for the given application and its relations.
	// Setting candidates at first to map by ID to avoid duplications.
	pkgVulIDToNewVulnerability := make(map[string]*NewVulnerability)
	now := time.Now().UTC()

	for _, resource := range application.Resources {
		for _, pkg := range resource.Packages {
			for _, vulnerability := range pkg.Vulnerabilities {
				id := string(CreatePkgVulID(pkg.ID, vulnerability.ID))
				pkgVulIDToNewVulnerability[id] = &NewVulnerability{
					ID:      id,
					VulID:   vulnerability.ID,
					AddedAt: now,
				}
			}
		}
	}

	newVulnerabilitiesCandidates := make([]*NewVulnerability, 0, len(pkgVulIDToNewVulnerability))
	for _, vulnerability := range pkgVulIDToNewVulnerability {
		newVulnerabilitiesCandidates = append(newVulnerabilitiesCandidates, vulnerability)
	}

	if len(newVulnerabilitiesCandidates) == 0 {
		log.Infof("No new vulnerabilities")
		return nil
	}

	// Try to set all new vulnerabilities candidates,
	// on conflict we will skip that vulnerability since it is not new to the system.
	doNothingOnConflict := clause.OnConflict{
		Columns: []clause.Column{{
			Name: columnNewVulID,
		}},
		DoNothing: true,
	}
	if err := v.newVulnerabilitiesTable.Clauses(doNothingOnConflict).Create(newVulnerabilitiesCandidates).Error; err != nil {
		return fmt.Errorf("failed to create new vulnerabilities: %v", newVulnerabilitiesCandidates)
	}

	return nil
}
