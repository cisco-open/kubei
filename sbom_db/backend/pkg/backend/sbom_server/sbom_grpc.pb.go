// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sbom.proto

package sbom

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SBOM_Get_FullMethodName = "/sbom.SBOM/Get"
	SBOM_Set_FullMethodName = "/sbom.SBOM/Set"
)

// SBOMClient is the client API for SBOM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SBOMClient interface {
	Get(ctx context.Context, in *GetRequest1, opts ...grpc.CallOption) (*GetReply1, error)
	Set(ctx context.Context, in *SetRequest1, opts ...grpc.CallOption) (*SetReply1, error)
}

type sBOMClient struct {
	cc grpc.ClientConnInterface
}

func NewSBOMClient(cc grpc.ClientConnInterface) SBOMClient {
	return &sBOMClient{cc}
}

func (c *sBOMClient) Get(ctx context.Context, in *GetRequest1, opts ...grpc.CallOption) (*GetReply1, error) {
	out := new(GetReply1)
	err := c.cc.Invoke(ctx, SBOM_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sBOMClient) Set(ctx context.Context, in *SetRequest1, opts ...grpc.CallOption) (*SetReply1, error) {
	out := new(SetReply1)
	err := c.cc.Invoke(ctx, SBOM_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SBOMServer is the server API for SBOM service.
// All implementations must embed UnimplementedSBOMServer
// for forward compatibility
type SBOMServer interface {
	Get(context.Context, *GetRequest1) (*GetReply1, error)
	Set(context.Context, *SetRequest1) (*SetReply1, error)
	mustEmbedUnimplementedSBOMServer()
}

// UnimplementedSBOMServer must be embedded to have forward compatible implementations.
type UnimplementedSBOMServer struct {
}

func (UnimplementedSBOMServer) Get(context.Context, *GetRequest1) (*GetReply1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSBOMServer) Set(context.Context, *SetRequest1) (*SetReply1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedSBOMServer) mustEmbedUnimplementedSBOMServer() {}

// UnsafeSBOMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SBOMServer will
// result in compilation errors.
type UnsafeSBOMServer interface {
	mustEmbedUnimplementedSBOMServer()
}

func RegisterSBOMServer(s grpc.ServiceRegistrar, srv SBOMServer) {
	s.RegisterService(&SBOM_ServiceDesc, srv)
}

func _SBOM_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SBOMServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SBOM_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SBOMServer).Get(ctx, req.(*GetRequest1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SBOM_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SBOMServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SBOM_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SBOMServer).Set(ctx, req.(*SetRequest1))
	}
	return interceptor(ctx, in, info, handler)
}

// SBOM_ServiceDesc is the grpc.ServiceDesc for SBOM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SBOM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sbom.SBOM",
	HandlerType: (*SBOMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SBOM_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _SBOM_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sbom.proto",
}
