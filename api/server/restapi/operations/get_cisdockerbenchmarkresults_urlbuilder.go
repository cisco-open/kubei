// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetCisdockerbenchmarkresultsURL generates an URL for the get cisdockerbenchmarkresults operation
type GetCisdockerbenchmarkresultsURL struct {
	ApplicationID              *string
	ApplicationResourceID      *string
	ApplicationResourcesGte    *int64
	ApplicationResourcesIsNot  []int64
	ApplicationResourcesIs     []int64
	ApplicationResourcesLte    *int64
	ApplicationsGte            *int64
	ApplicationsIsNot          []int64
	ApplicationsIs             []int64
	ApplicationsLte            *int64
	CisDockerBenchmarkLevelGte *string
	CisDockerBenchmarkLevelLte *string
	CurrentRuntimeScan         *bool
	Page                       int64
	PageSize                   int64
	SortDir                    *string
	SortKey                    string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetCisdockerbenchmarkresultsURL) WithBasePath(bp string) *GetCisdockerbenchmarkresultsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetCisdockerbenchmarkresultsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetCisdockerbenchmarkresultsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/cisdockerbenchmarkresults"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var applicationIDQ string
	if o.ApplicationID != nil {
		applicationIDQ = *o.ApplicationID
	}
	if applicationIDQ != "" {
		qs.Set("applicationID", applicationIDQ)
	}

	var applicationResourceIDQ string
	if o.ApplicationResourceID != nil {
		applicationResourceIDQ = *o.ApplicationResourceID
	}
	if applicationResourceIDQ != "" {
		qs.Set("applicationResourceID", applicationResourceIDQ)
	}

	var applicationResourcesGteQ string
	if o.ApplicationResourcesGte != nil {
		applicationResourcesGteQ = swag.FormatInt64(*o.ApplicationResourcesGte)
	}
	if applicationResourcesGteQ != "" {
		qs.Set("applicationResources[gte]", applicationResourcesGteQ)
	}

	var applicationResourcesIsNotIR []string
	for _, applicationResourcesIsNotI := range o.ApplicationResourcesIsNot {
		applicationResourcesIsNotIS := swag.FormatInt64(applicationResourcesIsNotI)
		if applicationResourcesIsNotIS != "" {
			applicationResourcesIsNotIR = append(applicationResourcesIsNotIR, applicationResourcesIsNotIS)
		}
	}

	applicationResourcesIsNot := swag.JoinByFormat(applicationResourcesIsNotIR, "")

	if len(applicationResourcesIsNot) > 0 {
		qsv := applicationResourcesIsNot[0]
		if qsv != "" {
			qs.Set("applicationResources[isNot]", qsv)
		}
	}

	var applicationResourcesIsIR []string
	for _, applicationResourcesIsI := range o.ApplicationResourcesIs {
		applicationResourcesIsIS := swag.FormatInt64(applicationResourcesIsI)
		if applicationResourcesIsIS != "" {
			applicationResourcesIsIR = append(applicationResourcesIsIR, applicationResourcesIsIS)
		}
	}

	applicationResourcesIs := swag.JoinByFormat(applicationResourcesIsIR, "")

	if len(applicationResourcesIs) > 0 {
		qsv := applicationResourcesIs[0]
		if qsv != "" {
			qs.Set("applicationResources[is]", qsv)
		}
	}

	var applicationResourcesLteQ string
	if o.ApplicationResourcesLte != nil {
		applicationResourcesLteQ = swag.FormatInt64(*o.ApplicationResourcesLte)
	}
	if applicationResourcesLteQ != "" {
		qs.Set("applicationResources[lte]", applicationResourcesLteQ)
	}

	var applicationsGteQ string
	if o.ApplicationsGte != nil {
		applicationsGteQ = swag.FormatInt64(*o.ApplicationsGte)
	}
	if applicationsGteQ != "" {
		qs.Set("applications[gte]", applicationsGteQ)
	}

	var applicationsIsNotIR []string
	for _, applicationsIsNotI := range o.ApplicationsIsNot {
		applicationsIsNotIS := swag.FormatInt64(applicationsIsNotI)
		if applicationsIsNotIS != "" {
			applicationsIsNotIR = append(applicationsIsNotIR, applicationsIsNotIS)
		}
	}

	applicationsIsNot := swag.JoinByFormat(applicationsIsNotIR, "")

	if len(applicationsIsNot) > 0 {
		qsv := applicationsIsNot[0]
		if qsv != "" {
			qs.Set("applications[isNot]", qsv)
		}
	}

	var applicationsIsIR []string
	for _, applicationsIsI := range o.ApplicationsIs {
		applicationsIsIS := swag.FormatInt64(applicationsIsI)
		if applicationsIsIS != "" {
			applicationsIsIR = append(applicationsIsIR, applicationsIsIS)
		}
	}

	applicationsIs := swag.JoinByFormat(applicationsIsIR, "")

	if len(applicationsIs) > 0 {
		qsv := applicationsIs[0]
		if qsv != "" {
			qs.Set("applications[is]", qsv)
		}
	}

	var applicationsLteQ string
	if o.ApplicationsLte != nil {
		applicationsLteQ = swag.FormatInt64(*o.ApplicationsLte)
	}
	if applicationsLteQ != "" {
		qs.Set("applications[lte]", applicationsLteQ)
	}

	var cisDockerBenchmarkLevelGteQ string
	if o.CisDockerBenchmarkLevelGte != nil {
		cisDockerBenchmarkLevelGteQ = *o.CisDockerBenchmarkLevelGte
	}
	if cisDockerBenchmarkLevelGteQ != "" {
		qs.Set("cisDockerBenchmarkLevel[gte]", cisDockerBenchmarkLevelGteQ)
	}

	var cisDockerBenchmarkLevelLteQ string
	if o.CisDockerBenchmarkLevelLte != nil {
		cisDockerBenchmarkLevelLteQ = *o.CisDockerBenchmarkLevelLte
	}
	if cisDockerBenchmarkLevelLteQ != "" {
		qs.Set("cisDockerBenchmarkLevel[lte]", cisDockerBenchmarkLevelLteQ)
	}

	var currentRuntimeScanQ string
	if o.CurrentRuntimeScan != nil {
		currentRuntimeScanQ = swag.FormatBool(*o.CurrentRuntimeScan)
	}
	if currentRuntimeScanQ != "" {
		qs.Set("currentRuntimeScan", currentRuntimeScanQ)
	}

	pageQ := swag.FormatInt64(o.Page)
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	pageSizeQ := swag.FormatInt64(o.PageSize)
	if pageSizeQ != "" {
		qs.Set("pageSize", pageSizeQ)
	}

	var sortDirQ string
	if o.SortDir != nil {
		sortDirQ = *o.SortDir
	}
	if sortDirQ != "" {
		qs.Set("sortDir", sortDirQ)
	}

	sortKeyQ := o.SortKey
	if sortKeyQ != "" {
		qs.Set("sortKey", sortKeyQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetCisdockerbenchmarkresultsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetCisdockerbenchmarkresultsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetCisdockerbenchmarkresultsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetCisdockerbenchmarkresultsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetCisdockerbenchmarkresultsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetCisdockerbenchmarkresultsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
