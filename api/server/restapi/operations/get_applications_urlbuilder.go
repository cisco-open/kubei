// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"

	"github.com/go-openapi/swag"
)

// GetApplicationsURL generates an URL for the get applications operation
type GetApplicationsURL struct {
	ApplicationEnvsContainElements         []string
	ApplicationEnvsDoesntContainElements   []string
	ApplicationLabelsContainElements       []string
	ApplicationLabelsDoesntContainElements []string
	ApplicationNameContains                []string
	ApplicationNameEnd                     *string
	ApplicationNameIsNot                   []string
	ApplicationNameIs                      []string
	ApplicationNameStart                   *string
	ApplicationResourceID                  *string
	ApplicationResourcesGte                *int64
	ApplicationResourcesIsNot              []int64
	ApplicationResourcesIs                 []int64
	ApplicationResourcesLte                *int64
	ApplicationTypeIs                      []string
	CisDockerBenchmarkLevelGte             *string
	CisDockerBenchmarkLevelLte             *string
	CurrentRuntimeScan                     *bool
	PackageID                              *string
	PackagesGte                            *int64
	PackagesIsNot                          []int64
	PackagesIs                             []int64
	PackagesLte                            *int64
	Page                                   int64
	PageSize                               int64
	SortDir                                *string
	SortKey                                string
	VulnerabilitySeverityGte               *string
	VulnerabilitySeverityLte               *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetApplicationsURL) WithBasePath(bp string) *GetApplicationsURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *GetApplicationsURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *GetApplicationsURL) Build() (*url.URL, error) {
	var _result url.URL

	var _path = "/applications"

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/api"
	}
	_result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	var applicationEnvsContainElementsIR []string
	for _, applicationEnvsContainElementsI := range o.ApplicationEnvsContainElements {
		applicationEnvsContainElementsIS := applicationEnvsContainElementsI
		if applicationEnvsContainElementsIS != "" {
			applicationEnvsContainElementsIR = append(applicationEnvsContainElementsIR, applicationEnvsContainElementsIS)
		}
	}

	applicationEnvsContainElements := swag.JoinByFormat(applicationEnvsContainElementsIR, "")

	if len(applicationEnvsContainElements) > 0 {
		qsv := applicationEnvsContainElements[0]
		if qsv != "" {
			qs.Set("applicationEnvs[containElements]", qsv)
		}
	}

	var applicationEnvsDoesntContainElementsIR []string
	for _, applicationEnvsDoesntContainElementsI := range o.ApplicationEnvsDoesntContainElements {
		applicationEnvsDoesntContainElementsIS := applicationEnvsDoesntContainElementsI
		if applicationEnvsDoesntContainElementsIS != "" {
			applicationEnvsDoesntContainElementsIR = append(applicationEnvsDoesntContainElementsIR, applicationEnvsDoesntContainElementsIS)
		}
	}

	applicationEnvsDoesntContainElements := swag.JoinByFormat(applicationEnvsDoesntContainElementsIR, "")

	if len(applicationEnvsDoesntContainElements) > 0 {
		qsv := applicationEnvsDoesntContainElements[0]
		if qsv != "" {
			qs.Set("applicationEnvs[doesntContainElements]", qsv)
		}
	}

	var applicationLabelsContainElementsIR []string
	for _, applicationLabelsContainElementsI := range o.ApplicationLabelsContainElements {
		applicationLabelsContainElementsIS := applicationLabelsContainElementsI
		if applicationLabelsContainElementsIS != "" {
			applicationLabelsContainElementsIR = append(applicationLabelsContainElementsIR, applicationLabelsContainElementsIS)
		}
	}

	applicationLabelsContainElements := swag.JoinByFormat(applicationLabelsContainElementsIR, "")

	if len(applicationLabelsContainElements) > 0 {
		qsv := applicationLabelsContainElements[0]
		if qsv != "" {
			qs.Set("applicationLabels[containElements]", qsv)
		}
	}

	var applicationLabelsDoesntContainElementsIR []string
	for _, applicationLabelsDoesntContainElementsI := range o.ApplicationLabelsDoesntContainElements {
		applicationLabelsDoesntContainElementsIS := applicationLabelsDoesntContainElementsI
		if applicationLabelsDoesntContainElementsIS != "" {
			applicationLabelsDoesntContainElementsIR = append(applicationLabelsDoesntContainElementsIR, applicationLabelsDoesntContainElementsIS)
		}
	}

	applicationLabelsDoesntContainElements := swag.JoinByFormat(applicationLabelsDoesntContainElementsIR, "")

	if len(applicationLabelsDoesntContainElements) > 0 {
		qsv := applicationLabelsDoesntContainElements[0]
		if qsv != "" {
			qs.Set("applicationLabels[doesntContainElements]", qsv)
		}
	}

	var applicationNameContainsIR []string
	for _, applicationNameContainsI := range o.ApplicationNameContains {
		applicationNameContainsIS := applicationNameContainsI
		if applicationNameContainsIS != "" {
			applicationNameContainsIR = append(applicationNameContainsIR, applicationNameContainsIS)
		}
	}

	applicationNameContains := swag.JoinByFormat(applicationNameContainsIR, "")

	if len(applicationNameContains) > 0 {
		qsv := applicationNameContains[0]
		if qsv != "" {
			qs.Set("applicationName[contains]", qsv)
		}
	}

	var applicationNameEndQ string
	if o.ApplicationNameEnd != nil {
		applicationNameEndQ = *o.ApplicationNameEnd
	}
	if applicationNameEndQ != "" {
		qs.Set("applicationName[end]", applicationNameEndQ)
	}

	var applicationNameIsNotIR []string
	for _, applicationNameIsNotI := range o.ApplicationNameIsNot {
		applicationNameIsNotIS := applicationNameIsNotI
		if applicationNameIsNotIS != "" {
			applicationNameIsNotIR = append(applicationNameIsNotIR, applicationNameIsNotIS)
		}
	}

	applicationNameIsNot := swag.JoinByFormat(applicationNameIsNotIR, "")

	if len(applicationNameIsNot) > 0 {
		qsv := applicationNameIsNot[0]
		if qsv != "" {
			qs.Set("applicationName[isNot]", qsv)
		}
	}

	var applicationNameIsIR []string
	for _, applicationNameIsI := range o.ApplicationNameIs {
		applicationNameIsIS := applicationNameIsI
		if applicationNameIsIS != "" {
			applicationNameIsIR = append(applicationNameIsIR, applicationNameIsIS)
		}
	}

	applicationNameIs := swag.JoinByFormat(applicationNameIsIR, "")

	if len(applicationNameIs) > 0 {
		qsv := applicationNameIs[0]
		if qsv != "" {
			qs.Set("applicationName[is]", qsv)
		}
	}

	var applicationNameStartQ string
	if o.ApplicationNameStart != nil {
		applicationNameStartQ = *o.ApplicationNameStart
	}
	if applicationNameStartQ != "" {
		qs.Set("applicationName[start]", applicationNameStartQ)
	}

	var applicationResourceIDQ string
	if o.ApplicationResourceID != nil {
		applicationResourceIDQ = *o.ApplicationResourceID
	}
	if applicationResourceIDQ != "" {
		qs.Set("applicationResourceID", applicationResourceIDQ)
	}

	var applicationResourcesGteQ string
	if o.ApplicationResourcesGte != nil {
		applicationResourcesGteQ = swag.FormatInt64(*o.ApplicationResourcesGte)
	}
	if applicationResourcesGteQ != "" {
		qs.Set("applicationResources[gte]", applicationResourcesGteQ)
	}

	var applicationResourcesIsNotIR []string
	for _, applicationResourcesIsNotI := range o.ApplicationResourcesIsNot {
		applicationResourcesIsNotIS := swag.FormatInt64(applicationResourcesIsNotI)
		if applicationResourcesIsNotIS != "" {
			applicationResourcesIsNotIR = append(applicationResourcesIsNotIR, applicationResourcesIsNotIS)
		}
	}

	applicationResourcesIsNot := swag.JoinByFormat(applicationResourcesIsNotIR, "")

	if len(applicationResourcesIsNot) > 0 {
		qsv := applicationResourcesIsNot[0]
		if qsv != "" {
			qs.Set("applicationResources[isNot]", qsv)
		}
	}

	var applicationResourcesIsIR []string
	for _, applicationResourcesIsI := range o.ApplicationResourcesIs {
		applicationResourcesIsIS := swag.FormatInt64(applicationResourcesIsI)
		if applicationResourcesIsIS != "" {
			applicationResourcesIsIR = append(applicationResourcesIsIR, applicationResourcesIsIS)
		}
	}

	applicationResourcesIs := swag.JoinByFormat(applicationResourcesIsIR, "")

	if len(applicationResourcesIs) > 0 {
		qsv := applicationResourcesIs[0]
		if qsv != "" {
			qs.Set("applicationResources[is]", qsv)
		}
	}

	var applicationResourcesLteQ string
	if o.ApplicationResourcesLte != nil {
		applicationResourcesLteQ = swag.FormatInt64(*o.ApplicationResourcesLte)
	}
	if applicationResourcesLteQ != "" {
		qs.Set("applicationResources[lte]", applicationResourcesLteQ)
	}

	var applicationTypeIsIR []string
	for _, applicationTypeIsI := range o.ApplicationTypeIs {
		applicationTypeIsIS := applicationTypeIsI
		if applicationTypeIsIS != "" {
			applicationTypeIsIR = append(applicationTypeIsIR, applicationTypeIsIS)
		}
	}

	applicationTypeIs := swag.JoinByFormat(applicationTypeIsIR, "")

	if len(applicationTypeIs) > 0 {
		qsv := applicationTypeIs[0]
		if qsv != "" {
			qs.Set("applicationType[is]", qsv)
		}
	}

	var cisDockerBenchmarkLevelGteQ string
	if o.CisDockerBenchmarkLevelGte != nil {
		cisDockerBenchmarkLevelGteQ = *o.CisDockerBenchmarkLevelGte
	}
	if cisDockerBenchmarkLevelGteQ != "" {
		qs.Set("cisDockerBenchmarkLevel[gte]", cisDockerBenchmarkLevelGteQ)
	}

	var cisDockerBenchmarkLevelLteQ string
	if o.CisDockerBenchmarkLevelLte != nil {
		cisDockerBenchmarkLevelLteQ = *o.CisDockerBenchmarkLevelLte
	}
	if cisDockerBenchmarkLevelLteQ != "" {
		qs.Set("cisDockerBenchmarkLevel[lte]", cisDockerBenchmarkLevelLteQ)
	}

	var currentRuntimeScanQ string
	if o.CurrentRuntimeScan != nil {
		currentRuntimeScanQ = swag.FormatBool(*o.CurrentRuntimeScan)
	}
	if currentRuntimeScanQ != "" {
		qs.Set("currentRuntimeScan", currentRuntimeScanQ)
	}

	var packageIDQ string
	if o.PackageID != nil {
		packageIDQ = *o.PackageID
	}
	if packageIDQ != "" {
		qs.Set("packageID", packageIDQ)
	}

	var packagesGteQ string
	if o.PackagesGte != nil {
		packagesGteQ = swag.FormatInt64(*o.PackagesGte)
	}
	if packagesGteQ != "" {
		qs.Set("packages[gte]", packagesGteQ)
	}

	var packagesIsNotIR []string
	for _, packagesIsNotI := range o.PackagesIsNot {
		packagesIsNotIS := swag.FormatInt64(packagesIsNotI)
		if packagesIsNotIS != "" {
			packagesIsNotIR = append(packagesIsNotIR, packagesIsNotIS)
		}
	}

	packagesIsNot := swag.JoinByFormat(packagesIsNotIR, "")

	if len(packagesIsNot) > 0 {
		qsv := packagesIsNot[0]
		if qsv != "" {
			qs.Set("packages[isNot]", qsv)
		}
	}

	var packagesIsIR []string
	for _, packagesIsI := range o.PackagesIs {
		packagesIsIS := swag.FormatInt64(packagesIsI)
		if packagesIsIS != "" {
			packagesIsIR = append(packagesIsIR, packagesIsIS)
		}
	}

	packagesIs := swag.JoinByFormat(packagesIsIR, "")

	if len(packagesIs) > 0 {
		qsv := packagesIs[0]
		if qsv != "" {
			qs.Set("packages[is]", qsv)
		}
	}

	var packagesLteQ string
	if o.PackagesLte != nil {
		packagesLteQ = swag.FormatInt64(*o.PackagesLte)
	}
	if packagesLteQ != "" {
		qs.Set("packages[lte]", packagesLteQ)
	}

	pageQ := swag.FormatInt64(o.Page)
	if pageQ != "" {
		qs.Set("page", pageQ)
	}

	pageSizeQ := swag.FormatInt64(o.PageSize)
	if pageSizeQ != "" {
		qs.Set("pageSize", pageSizeQ)
	}

	var sortDirQ string
	if o.SortDir != nil {
		sortDirQ = *o.SortDir
	}
	if sortDirQ != "" {
		qs.Set("sortDir", sortDirQ)
	}

	sortKeyQ := o.SortKey
	if sortKeyQ != "" {
		qs.Set("sortKey", sortKeyQ)
	}

	var vulnerabilitySeverityGteQ string
	if o.VulnerabilitySeverityGte != nil {
		vulnerabilitySeverityGteQ = *o.VulnerabilitySeverityGte
	}
	if vulnerabilitySeverityGteQ != "" {
		qs.Set("vulnerabilitySeverity[gte]", vulnerabilitySeverityGteQ)
	}

	var vulnerabilitySeverityLteQ string
	if o.VulnerabilitySeverityLte != nil {
		vulnerabilitySeverityLteQ = *o.VulnerabilitySeverityLte
	}
	if vulnerabilitySeverityLteQ != "" {
		qs.Set("vulnerabilitySeverity[lte]", vulnerabilitySeverityLteQ)
	}

	_result.RawQuery = qs.Encode()

	return &_result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *GetApplicationsURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *GetApplicationsURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *GetApplicationsURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on GetApplicationsURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on GetApplicationsURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *GetApplicationsURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
