// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openclarity/kubeclarity/api/server/models"
)

// PostApplicationsCreatedCode is the HTTP code returned for type PostApplicationsCreated
const PostApplicationsCreatedCode int = 201

/*PostApplicationsCreated New application was created.

swagger:response postApplicationsCreated
*/
type PostApplicationsCreated struct {

	/*
	  In: Body
	*/
	Payload *models.ApplicationInfo `json:"body,omitempty"`
}

// NewPostApplicationsCreated creates PostApplicationsCreated with default headers values
func NewPostApplicationsCreated() *PostApplicationsCreated {

	return &PostApplicationsCreated{}
}

// WithPayload adds the payload to the post applications created response
func (o *PostApplicationsCreated) WithPayload(payload *models.ApplicationInfo) *PostApplicationsCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post applications created response
func (o *PostApplicationsCreated) SetPayload(payload *models.ApplicationInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostApplicationsCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostApplicationsConflictCode is the HTTP code returned for type PostApplicationsConflict
const PostApplicationsConflictCode int = 409

/*PostApplicationsConflict Application already exist.

swagger:response postApplicationsConflict
*/
type PostApplicationsConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ApplicationInfo `json:"body,omitempty"`
}

// NewPostApplicationsConflict creates PostApplicationsConflict with default headers values
func NewPostApplicationsConflict() *PostApplicationsConflict {

	return &PostApplicationsConflict{}
}

// WithPayload adds the payload to the post applications conflict response
func (o *PostApplicationsConflict) WithPayload(payload *models.ApplicationInfo) *PostApplicationsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post applications conflict response
func (o *PostApplicationsConflict) SetPayload(payload *models.ApplicationInfo) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostApplicationsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostApplicationsDefault unknown error

swagger:response postApplicationsDefault
*/
type PostApplicationsDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostApplicationsDefault creates PostApplicationsDefault with default headers values
func NewPostApplicationsDefault(code int) *PostApplicationsDefault {
	if code <= 0 {
		code = 500
	}

	return &PostApplicationsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post applications default response
func (o *PostApplicationsDefault) WithStatusCode(code int) *PostApplicationsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post applications default response
func (o *PostApplicationsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post applications default response
func (o *PostApplicationsDefault) WithPayload(payload *models.APIResponse) *PostApplicationsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post applications default response
func (o *PostApplicationsDefault) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostApplicationsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
