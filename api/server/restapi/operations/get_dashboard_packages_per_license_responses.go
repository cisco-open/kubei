// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openclarity/kubeclarity/api/server/models"
)

// GetDashboardPackagesPerLicenseOKCode is the HTTP code returned for type GetDashboardPackagesPerLicenseOK
const GetDashboardPackagesPerLicenseOKCode int = 200

/*GetDashboardPackagesPerLicenseOK Success

swagger:response getDashboardPackagesPerLicenseOK
*/
type GetDashboardPackagesPerLicenseOK struct {

	/*
	  In: Body
	*/
	Payload []*models.PackagesCountPerLicense `json:"body,omitempty"`
}

// NewGetDashboardPackagesPerLicenseOK creates GetDashboardPackagesPerLicenseOK with default headers values
func NewGetDashboardPackagesPerLicenseOK() *GetDashboardPackagesPerLicenseOK {

	return &GetDashboardPackagesPerLicenseOK{}
}

// WithPayload adds the payload to the get dashboard packages per license o k response
func (o *GetDashboardPackagesPerLicenseOK) WithPayload(payload []*models.PackagesCountPerLicense) *GetDashboardPackagesPerLicenseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dashboard packages per license o k response
func (o *GetDashboardPackagesPerLicenseOK) SetPayload(payload []*models.PackagesCountPerLicense) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDashboardPackagesPerLicenseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.PackagesCountPerLicense, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*GetDashboardPackagesPerLicenseDefault unknown error

swagger:response getDashboardPackagesPerLicenseDefault
*/
type GetDashboardPackagesPerLicenseDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetDashboardPackagesPerLicenseDefault creates GetDashboardPackagesPerLicenseDefault with default headers values
func NewGetDashboardPackagesPerLicenseDefault(code int) *GetDashboardPackagesPerLicenseDefault {
	if code <= 0 {
		code = 500
	}

	return &GetDashboardPackagesPerLicenseDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get dashboard packages per license default response
func (o *GetDashboardPackagesPerLicenseDefault) WithStatusCode(code int) *GetDashboardPackagesPerLicenseDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get dashboard packages per license default response
func (o *GetDashboardPackagesPerLicenseDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get dashboard packages per license default response
func (o *GetDashboardPackagesPerLicenseDefault) WithPayload(payload *models.APIResponse) *GetDashboardPackagesPerLicenseDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dashboard packages per license default response
func (o *GetDashboardPackagesPerLicenseDefault) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDashboardPackagesPerLicenseDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
