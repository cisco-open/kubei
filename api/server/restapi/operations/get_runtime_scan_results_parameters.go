// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetRuntimeScanResultsParams creates a new GetRuntimeScanResultsParams object
//
// There are no default values defined in the spec.
func NewGetRuntimeScanResultsParams() GetRuntimeScanResultsParams {

	return GetRuntimeScanResultsParams{}
}

// GetRuntimeScanResultsParams contains all the bound params for the get runtime scan results operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetRuntimeScanResults
type GetRuntimeScanResultsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	CisDockerBenchmarkLevelGte *string
	/*
	  In: query
	*/
	VulnerabilitySeverityGte *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetRuntimeScanResultsParams() beforehand.
func (o *GetRuntimeScanResultsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCisDockerBenchmarkLevelGte, qhkCisDockerBenchmarkLevelGte, _ := qs.GetOK("cisDockerBenchmarkLevel[gte]")
	if err := o.bindCisDockerBenchmarkLevelGte(qCisDockerBenchmarkLevelGte, qhkCisDockerBenchmarkLevelGte, route.Formats); err != nil {
		res = append(res, err)
	}

	qVulnerabilitySeverityGte, qhkVulnerabilitySeverityGte, _ := qs.GetOK("vulnerabilitySeverity[gte]")
	if err := o.bindVulnerabilitySeverityGte(qVulnerabilitySeverityGte, qhkVulnerabilitySeverityGte, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCisDockerBenchmarkLevelGte binds and validates parameter CisDockerBenchmarkLevelGte from query.
func (o *GetRuntimeScanResultsParams) bindCisDockerBenchmarkLevelGte(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.CisDockerBenchmarkLevelGte = &raw

	if err := o.validateCisDockerBenchmarkLevelGte(formats); err != nil {
		return err
	}

	return nil
}

// validateCisDockerBenchmarkLevelGte carries on validations for parameter CisDockerBenchmarkLevelGte
func (o *GetRuntimeScanResultsParams) validateCisDockerBenchmarkLevelGte(formats strfmt.Registry) error {

	if err := validate.EnumCase("cisDockerBenchmarkLevel[gte]", "query", *o.CisDockerBenchmarkLevelGte, []interface{}{"INFO", "WARN", "FATAL"}, true); err != nil {
		return err
	}

	return nil
}

// bindVulnerabilitySeverityGte binds and validates parameter VulnerabilitySeverityGte from query.
func (o *GetRuntimeScanResultsParams) bindVulnerabilitySeverityGte(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.VulnerabilitySeverityGte = &raw

	if err := o.validateVulnerabilitySeverityGte(formats); err != nil {
		return err
	}

	return nil
}

// validateVulnerabilitySeverityGte carries on validations for parameter VulnerabilitySeverityGte
func (o *GetRuntimeScanResultsParams) validateVulnerabilitySeverityGte(formats strfmt.Registry) error {

	if err := validate.EnumCase("vulnerabilitySeverity[gte]", "query", *o.VulnerabilitySeverityGte, []interface{}{"CRITICAL", "HIGH", "MEDIUM", "LOW", "NEGLIGIBLE"}, true); err != nil {
		return err
	}

	return nil
}
