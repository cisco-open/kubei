// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openclarity/kubeclarity/api/server/models"
)

// PostApplicationsVulnerabilityScanIDCreatedCode is the HTTP code returned for type PostApplicationsVulnerabilityScanIDCreated
const PostApplicationsVulnerabilityScanIDCreatedCode int = 201

/*PostApplicationsVulnerabilityScanIDCreated Application vulnerability scan successfully reported.

swagger:response postApplicationsVulnerabilityScanIdCreated
*/
type PostApplicationsVulnerabilityScanIDCreated struct {
}

// NewPostApplicationsVulnerabilityScanIDCreated creates PostApplicationsVulnerabilityScanIDCreated with default headers values
func NewPostApplicationsVulnerabilityScanIDCreated() *PostApplicationsVulnerabilityScanIDCreated {

	return &PostApplicationsVulnerabilityScanIDCreated{}
}

// WriteResponse to the client
func (o *PostApplicationsVulnerabilityScanIDCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// PostApplicationsVulnerabilityScanIDNotFoundCode is the HTTP code returned for type PostApplicationsVulnerabilityScanIDNotFound
const PostApplicationsVulnerabilityScanIDNotFoundCode int = 404

/*PostApplicationsVulnerabilityScanIDNotFound Application not found.

swagger:response postApplicationsVulnerabilityScanIdNotFound
*/
type PostApplicationsVulnerabilityScanIDNotFound struct {
}

// NewPostApplicationsVulnerabilityScanIDNotFound creates PostApplicationsVulnerabilityScanIDNotFound with default headers values
func NewPostApplicationsVulnerabilityScanIDNotFound() *PostApplicationsVulnerabilityScanIDNotFound {

	return &PostApplicationsVulnerabilityScanIDNotFound{}
}

// WriteResponse to the client
func (o *PostApplicationsVulnerabilityScanIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*PostApplicationsVulnerabilityScanIDDefault unknown error

swagger:response postApplicationsVulnerabilityScanIdDefault
*/
type PostApplicationsVulnerabilityScanIDDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewPostApplicationsVulnerabilityScanIDDefault creates PostApplicationsVulnerabilityScanIDDefault with default headers values
func NewPostApplicationsVulnerabilityScanIDDefault(code int) *PostApplicationsVulnerabilityScanIDDefault {
	if code <= 0 {
		code = 500
	}

	return &PostApplicationsVulnerabilityScanIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post applications vulnerability scan ID default response
func (o *PostApplicationsVulnerabilityScanIDDefault) WithStatusCode(code int) *PostApplicationsVulnerabilityScanIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post applications vulnerability scan ID default response
func (o *PostApplicationsVulnerabilityScanIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post applications vulnerability scan ID default response
func (o *PostApplicationsVulnerabilityScanIDDefault) WithPayload(payload *models.APIResponse) *PostApplicationsVulnerabilityScanIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post applications vulnerability scan ID default response
func (o *PostApplicationsVulnerabilityScanIDDefault) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostApplicationsVulnerabilityScanIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
