// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/openclarity/kubeclarity/api/server/models"
)

// GetDashboardPackagesPerLanguageOKCode is the HTTP code returned for type GetDashboardPackagesPerLanguageOK
const GetDashboardPackagesPerLanguageOKCode int = 200

/*GetDashboardPackagesPerLanguageOK Success

swagger:response getDashboardPackagesPerLanguageOK
*/
type GetDashboardPackagesPerLanguageOK struct {

	/*
	  In: Body
	*/
	Payload []*models.PackagesCountPerLanguage `json:"body,omitempty"`
}

// NewGetDashboardPackagesPerLanguageOK creates GetDashboardPackagesPerLanguageOK with default headers values
func NewGetDashboardPackagesPerLanguageOK() *GetDashboardPackagesPerLanguageOK {

	return &GetDashboardPackagesPerLanguageOK{}
}

// WithPayload adds the payload to the get dashboard packages per language o k response
func (o *GetDashboardPackagesPerLanguageOK) WithPayload(payload []*models.PackagesCountPerLanguage) *GetDashboardPackagesPerLanguageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dashboard packages per language o k response
func (o *GetDashboardPackagesPerLanguageOK) SetPayload(payload []*models.PackagesCountPerLanguage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDashboardPackagesPerLanguageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.PackagesCountPerLanguage, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*GetDashboardPackagesPerLanguageDefault unknown error

swagger:response getDashboardPackagesPerLanguageDefault
*/
type GetDashboardPackagesPerLanguageDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.APIResponse `json:"body,omitempty"`
}

// NewGetDashboardPackagesPerLanguageDefault creates GetDashboardPackagesPerLanguageDefault with default headers values
func NewGetDashboardPackagesPerLanguageDefault(code int) *GetDashboardPackagesPerLanguageDefault {
	if code <= 0 {
		code = 500
	}

	return &GetDashboardPackagesPerLanguageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get dashboard packages per language default response
func (o *GetDashboardPackagesPerLanguageDefault) WithStatusCode(code int) *GetDashboardPackagesPerLanguageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get dashboard packages per language default response
func (o *GetDashboardPackagesPerLanguageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get dashboard packages per language default response
func (o *GetDashboardPackagesPerLanguageDefault) WithPayload(payload *models.APIResponse) *GetDashboardPackagesPerLanguageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get dashboard packages per language default response
func (o *GetDashboardPackagesPerLanguageDefault) SetPayload(payload *models.APIResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDashboardPackagesPerLanguageDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
