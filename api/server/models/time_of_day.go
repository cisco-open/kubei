// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeOfDay time of day
//
// swagger:model TimeOfDay
type TimeOfDay struct {

	// hour
	// Maximum: 23
	// Minimum: 0
	Hour *int64 `json:"hour,omitempty"`

	// minute
	// Maximum: 59
	// Minimum: 0
	Minute *int64 `json:"minute,omitempty"`
}

// Validate validates this time of day
func (m *TimeOfDay) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHour(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinute(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeOfDay) validateHour(formats strfmt.Registry) error {
	if swag.IsZero(m.Hour) { // not required
		return nil
	}

	if err := validate.MinimumInt("hour", "body", *m.Hour, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("hour", "body", *m.Hour, 23, false); err != nil {
		return err
	}

	return nil
}

func (m *TimeOfDay) validateMinute(formats strfmt.Registry) error {
	if swag.IsZero(m.Minute) { // not required
		return nil
	}

	if err := validate.MinimumInt("minute", "body", *m.Minute, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("minute", "body", *m.Minute, 59, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this time of day based on context it is used
func (m *TimeOfDay) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TimeOfDay) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeOfDay) UnmarshalBinary(b []byte) error {
	var res TimeOfDay
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
