// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RuntimeScheduleScanConfigType runtime schedule scan config type
//
// swagger:discriminator RuntimeScheduleScanConfigType ScheduleScanConfigType
type RuntimeScheduleScanConfigType interface {
	runtime.Validatable
	runtime.ContextValidatable

	// schedule scan config type
	// Enum: [SingleScheduleScanConfig ByHoursScheduleScanConfig ByDaysScheduleScanConfig WeeklyScheduleScanConfig]
	ScheduleScanConfigType() string
	SetScheduleScanConfigType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type runtimeScheduleScanConfigType struct {
	scheduleScanConfigTypeField string
}

// ScheduleScanConfigType gets the schedule scan config type of this polymorphic type
func (m *runtimeScheduleScanConfigType) ScheduleScanConfigType() string {
	return "RuntimeScheduleScanConfigType"
}

// SetScheduleScanConfigType sets the schedule scan config type of this polymorphic type
func (m *runtimeScheduleScanConfigType) SetScheduleScanConfigType(val string) {
}

// UnmarshalRuntimeScheduleScanConfigTypeSlice unmarshals polymorphic slices of RuntimeScheduleScanConfigType
func UnmarshalRuntimeScheduleScanConfigTypeSlice(reader io.Reader, consumer runtime.Consumer) ([]RuntimeScheduleScanConfigType, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []RuntimeScheduleScanConfigType
	for _, element := range elements {
		obj, err := unmarshalRuntimeScheduleScanConfigType(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalRuntimeScheduleScanConfigType unmarshals polymorphic RuntimeScheduleScanConfigType
func UnmarshalRuntimeScheduleScanConfigType(reader io.Reader, consumer runtime.Consumer) (RuntimeScheduleScanConfigType, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalRuntimeScheduleScanConfigType(data, consumer)
}

func unmarshalRuntimeScheduleScanConfigType(data []byte, consumer runtime.Consumer) (RuntimeScheduleScanConfigType, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the ScheduleScanConfigType property.
	var getType struct {
		ScheduleScanConfigType string `json:"ScheduleScanConfigType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("ScheduleScanConfigType", "body", getType.ScheduleScanConfigType); err != nil {
		return nil, err
	}

	// The value of ScheduleScanConfigType is used to determine which type to create and unmarshal the data into
	switch getType.ScheduleScanConfigType {
	case "ByDaysScheduleScanConfig":
		var result ByDaysScheduleScanConfig
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "ByHoursScheduleScanConfig":
		var result ByHoursScheduleScanConfig
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "RuntimeScheduleScanConfigType":
		var result runtimeScheduleScanConfigType
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SingleScheduleScanConfig":
		var result SingleScheduleScanConfig
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "WeeklyScheduleScanConfig":
		var result WeeklyScheduleScanConfig
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid ScheduleScanConfigType value: %q", getType.ScheduleScanConfigType)
}

// Validate validates this runtime schedule scan config type
func (m *runtimeScheduleScanConfigType) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this runtime schedule scan config type based on context it is used
func (m *runtimeScheduleScanConfigType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
