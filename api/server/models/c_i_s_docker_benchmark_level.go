// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CISDockerBenchmarkLevel c i s docker benchmark level
//
// swagger:model CISDockerBenchmarkLevel
type CISDockerBenchmarkLevel string

func NewCISDockerBenchmarkLevel(value CISDockerBenchmarkLevel) *CISDockerBenchmarkLevel {
	v := value
	return &v
}

const (

	// CISDockerBenchmarkLevelINFO captures enum value "INFO"
	CISDockerBenchmarkLevelINFO CISDockerBenchmarkLevel = "INFO"

	// CISDockerBenchmarkLevelWARN captures enum value "WARN"
	CISDockerBenchmarkLevelWARN CISDockerBenchmarkLevel = "WARN"

	// CISDockerBenchmarkLevelFATAL captures enum value "FATAL"
	CISDockerBenchmarkLevelFATAL CISDockerBenchmarkLevel = "FATAL"
)

// for schema
var cISDockerBenchmarkLevelEnum []interface{}

func init() {
	var res []CISDockerBenchmarkLevel
	if err := json.Unmarshal([]byte(`["INFO","WARN","FATAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cISDockerBenchmarkLevelEnum = append(cISDockerBenchmarkLevelEnum, v)
	}
}

func (m CISDockerBenchmarkLevel) validateCISDockerBenchmarkLevelEnum(path, location string, value CISDockerBenchmarkLevel) error {
	if err := validate.EnumCase(path, location, value, cISDockerBenchmarkLevelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this c i s docker benchmark level
func (m CISDockerBenchmarkLevel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCISDockerBenchmarkLevelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this c i s docker benchmark level based on context it is used
func (m CISDockerBenchmarkLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
