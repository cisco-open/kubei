// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ResourceType resource type
//
// swagger:model ResourceType
type ResourceType string

func NewResourceType(value ResourceType) *ResourceType {
	v := value
	return &v
}

const (

	// ResourceTypeIMAGE captures enum value "IMAGE"
	ResourceTypeIMAGE ResourceType = "IMAGE"

	// ResourceTypeDIRECTORY captures enum value "DIRECTORY"
	ResourceTypeDIRECTORY ResourceType = "DIRECTORY"

	// ResourceTypeFILE captures enum value "FILE"
	ResourceTypeFILE ResourceType = "FILE"

	// ResourceTypeROOTFS captures enum value "ROOTFS"
	ResourceTypeROOTFS ResourceType = "ROOTFS"
)

// for schema
var resourceTypeEnum []interface{}

func init() {
	var res []ResourceType
	if err := json.Unmarshal([]byte(`["IMAGE","DIRECTORY","FILE","ROOTFS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		resourceTypeEnum = append(resourceTypeEnum, v)
	}
}

func (m ResourceType) validateResourceTypeEnum(path, location string, value ResourceType) error {
	if err := validate.EnumCase(path, location, value, resourceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this resource type
func (m ResourceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateResourceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this resource type based on context it is used
func (m ResourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
