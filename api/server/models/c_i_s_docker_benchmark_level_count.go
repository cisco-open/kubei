// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CISDockerBenchmarkLevelCount c i s docker benchmark level count
//
// swagger:model CISDockerBenchmarkLevelCount
type CISDockerBenchmarkLevelCount struct {

	// count
	Count uint32 `json:"count,omitempty"`

	// level
	Level CISDockerBenchmarkLevel `json:"level,omitempty"`
}

// Validate validates this c i s docker benchmark level count
func (m *CISDockerBenchmarkLevelCount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CISDockerBenchmarkLevelCount) validateLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.Level) { // not required
		return nil
	}

	if err := m.Level.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("level")
		}
		return err
	}

	return nil
}

// ContextValidate validate this c i s docker benchmark level count based on the context it is used
func (m *CISDockerBenchmarkLevelCount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLevel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CISDockerBenchmarkLevelCount) contextValidateLevel(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Level.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("level")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CISDockerBenchmarkLevelCount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CISDockerBenchmarkLevelCount) UnmarshalBinary(b []byte) error {
	var res CISDockerBenchmarkLevelCount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
