// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RuntimeScanStatus Status of a runtime scan
//
// swagger:model RuntimeScanStatus
type RuntimeScanStatus string

func NewRuntimeScanStatus(value RuntimeScanStatus) *RuntimeScanStatus {
	v := value
	return &v
}

const (

	// RuntimeScanStatusNOTSTARTED captures enum value "NOT_STARTED"
	RuntimeScanStatusNOTSTARTED RuntimeScanStatus = "NOT_STARTED"

	// RuntimeScanStatusINPROGRESS captures enum value "IN_PROGRESS"
	RuntimeScanStatusINPROGRESS RuntimeScanStatus = "IN_PROGRESS"

	// RuntimeScanStatusFINALIZING captures enum value "FINALIZING"
	RuntimeScanStatusFINALIZING RuntimeScanStatus = "FINALIZING"

	// RuntimeScanStatusDONE captures enum value "DONE"
	RuntimeScanStatusDONE RuntimeScanStatus = "DONE"
)

// for schema
var runtimeScanStatusEnum []interface{}

func init() {
	var res []RuntimeScanStatus
	if err := json.Unmarshal([]byte(`["NOT_STARTED","IN_PROGRESS","FINALIZING","DONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		runtimeScanStatusEnum = append(runtimeScanStatusEnum, v)
	}
}

func (m RuntimeScanStatus) validateRuntimeScanStatusEnum(path, location string, value RuntimeScanStatus) error {
	if err := validate.EnumCase(path, location, value, runtimeScanStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this runtime scan status
func (m RuntimeScanStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRuntimeScanStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this runtime scan status based on the context it is used
func (m RuntimeScanStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := validate.ReadOnly(ctx, "", "body", RuntimeScanStatus(m)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
