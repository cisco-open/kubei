// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ResourceVulnerabilityScan resource vulnerability scan
//
// swagger:model ResourceVulnerabilityScan
type ResourceVulnerabilityScan struct {

	// cis docker benchmark results
	CisDockerBenchmarkResults []*CISDockerBenchmarkCodeInfo `json:"cisDockerBenchmarkResults"`

	// package vulnerabilities
	PackageVulnerabilities []*PackageVulnerabilityScan `json:"packageVulnerabilities"`

	// resource
	Resource *ResourceInfo `json:"resource,omitempty"`

	// resource layer commands
	ResourceLayerCommands []*ResourceLayerCommand `json:"resourceLayerCommands"`
}

// Validate validates this resource vulnerability scan
func (m *ResourceVulnerabilityScan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCisDockerBenchmarkResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageVulnerabilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceLayerCommands(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceVulnerabilityScan) validateCisDockerBenchmarkResults(formats strfmt.Registry) error {
	if swag.IsZero(m.CisDockerBenchmarkResults) { // not required
		return nil
	}

	for i := 0; i < len(m.CisDockerBenchmarkResults); i++ {
		if swag.IsZero(m.CisDockerBenchmarkResults[i]) { // not required
			continue
		}

		if m.CisDockerBenchmarkResults[i] != nil {
			if err := m.CisDockerBenchmarkResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cisDockerBenchmarkResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceVulnerabilityScan) validatePackageVulnerabilities(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageVulnerabilities) { // not required
		return nil
	}

	for i := 0; i < len(m.PackageVulnerabilities); i++ {
		if swag.IsZero(m.PackageVulnerabilities[i]) { // not required
			continue
		}

		if m.PackageVulnerabilities[i] != nil {
			if err := m.PackageVulnerabilities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packageVulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceVulnerabilityScan) validateResource(formats strfmt.Registry) error {
	if swag.IsZero(m.Resource) { // not required
		return nil
	}

	if m.Resource != nil {
		if err := m.Resource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceVulnerabilityScan) validateResourceLayerCommands(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceLayerCommands) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceLayerCommands); i++ {
		if swag.IsZero(m.ResourceLayerCommands[i]) { // not required
			continue
		}

		if m.ResourceLayerCommands[i] != nil {
			if err := m.ResourceLayerCommands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceLayerCommands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this resource vulnerability scan based on the context it is used
func (m *ResourceVulnerabilityScan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCisDockerBenchmarkResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageVulnerabilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceLayerCommands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceVulnerabilityScan) contextValidateCisDockerBenchmarkResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CisDockerBenchmarkResults); i++ {

		if m.CisDockerBenchmarkResults[i] != nil {
			if err := m.CisDockerBenchmarkResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cisDockerBenchmarkResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceVulnerabilityScan) contextValidatePackageVulnerabilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PackageVulnerabilities); i++ {

		if m.PackageVulnerabilities[i] != nil {
			if err := m.PackageVulnerabilities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packageVulnerabilities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ResourceVulnerabilityScan) contextValidateResource(ctx context.Context, formats strfmt.Registry) error {

	if m.Resource != nil {
		if err := m.Resource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceVulnerabilityScan) contextValidateResourceLayerCommands(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceLayerCommands); i++ {

		if m.ResourceLayerCommands[i] != nil {
			if err := m.ResourceLayerCommands[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resourceLayerCommands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceVulnerabilityScan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceVulnerabilityScan) UnmarshalBinary(b []byte) error {
	var res ResourceVulnerabilityScan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
