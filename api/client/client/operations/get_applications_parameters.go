// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetApplicationsParams creates a new GetApplicationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetApplicationsParams() *GetApplicationsParams {
	return &GetApplicationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetApplicationsParamsWithTimeout creates a new GetApplicationsParams object
// with the ability to set a timeout on a request.
func NewGetApplicationsParamsWithTimeout(timeout time.Duration) *GetApplicationsParams {
	return &GetApplicationsParams{
		timeout: timeout,
	}
}

// NewGetApplicationsParamsWithContext creates a new GetApplicationsParams object
// with the ability to set a context for a request.
func NewGetApplicationsParamsWithContext(ctx context.Context) *GetApplicationsParams {
	return &GetApplicationsParams{
		Context: ctx,
	}
}

// NewGetApplicationsParamsWithHTTPClient creates a new GetApplicationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetApplicationsParamsWithHTTPClient(client *http.Client) *GetApplicationsParams {
	return &GetApplicationsParams{
		HTTPClient: client,
	}
}

/* GetApplicationsParams contains all the parameters to send to the API endpoint
   for the get applications operation.

   Typically these are written to a http.Request.
*/
type GetApplicationsParams struct {

	// ApplicationEnvsContainElements.
	ApplicationEnvsContainElements []string

	// ApplicationEnvsDoesntContainElements.
	ApplicationEnvsDoesntContainElements []string

	// ApplicationLabelsContainElements.
	ApplicationLabelsContainElements []string

	// ApplicationLabelsDoesntContainElements.
	ApplicationLabelsDoesntContainElements []string

	// ApplicationNameContains.
	ApplicationNameContains []string

	// ApplicationNameEnd.
	ApplicationNameEnd *string

	// ApplicationNameIsNot.
	ApplicationNameIsNot []string

	// ApplicationNameIs.
	ApplicationNameIs []string

	// ApplicationNameStart.
	ApplicationNameStart *string

	/* ApplicationResourceID.

	   application resource ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	ApplicationResourceID *string

	/* ApplicationResourcesGte.

	   greater than or equal
	*/
	ApplicationResourcesGte *int64

	// ApplicationResourcesIsNot.
	ApplicationResourcesIsNot []int64

	// ApplicationResourcesIs.
	ApplicationResourcesIs []int64

	/* ApplicationResourcesLte.

	   less than or equal
	*/
	ApplicationResourcesLte *int64

	// ApplicationTypeIs.
	ApplicationTypeIs []string

	// CisDockerBenchmarkLevelGte.
	CisDockerBenchmarkLevelGte *string

	// CisDockerBenchmarkLevelLte.
	CisDockerBenchmarkLevelLte *string

	/* CurrentRuntimeScan.

	   current runtime scan system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	CurrentRuntimeScan *bool

	/* PackageID.

	   package ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	PackageID *string

	/* PackagesGte.

	   greater than or equal
	*/
	PackagesGte *int64

	// PackagesIsNot.
	PackagesIsNot []int64

	// PackagesIs.
	PackagesIs []int64

	/* PackagesLte.

	   less than or equal
	*/
	PackagesLte *int64

	/* Page.

	   Page number of the query
	*/
	Page int64

	/* PageSize.

	   Maximum items to return
	*/
	PageSize int64

	/* SortDir.

	   Sorting direction

	   Default: "ASC"
	*/
	SortDir *string

	/* SortKey.

	   Sort key
	*/
	SortKey string

	// VulnerabilitySeverityGte.
	VulnerabilitySeverityGte *string

	// VulnerabilitySeverityLte.
	VulnerabilitySeverityLte *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get applications params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetApplicationsParams) WithDefaults() *GetApplicationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get applications params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetApplicationsParams) SetDefaults() {
	var (
		sortDirDefault = string("ASC")
	)

	val := GetApplicationsParams{
		SortDir: &sortDirDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get applications params
func (o *GetApplicationsParams) WithTimeout(timeout time.Duration) *GetApplicationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get applications params
func (o *GetApplicationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get applications params
func (o *GetApplicationsParams) WithContext(ctx context.Context) *GetApplicationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get applications params
func (o *GetApplicationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get applications params
func (o *GetApplicationsParams) WithHTTPClient(client *http.Client) *GetApplicationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get applications params
func (o *GetApplicationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationEnvsContainElements adds the applicationEnvsContainElements to the get applications params
func (o *GetApplicationsParams) WithApplicationEnvsContainElements(applicationEnvsContainElements []string) *GetApplicationsParams {
	o.SetApplicationEnvsContainElements(applicationEnvsContainElements)
	return o
}

// SetApplicationEnvsContainElements adds the applicationEnvsContainElements to the get applications params
func (o *GetApplicationsParams) SetApplicationEnvsContainElements(applicationEnvsContainElements []string) {
	o.ApplicationEnvsContainElements = applicationEnvsContainElements
}

// WithApplicationEnvsDoesntContainElements adds the applicationEnvsDoesntContainElements to the get applications params
func (o *GetApplicationsParams) WithApplicationEnvsDoesntContainElements(applicationEnvsDoesntContainElements []string) *GetApplicationsParams {
	o.SetApplicationEnvsDoesntContainElements(applicationEnvsDoesntContainElements)
	return o
}

// SetApplicationEnvsDoesntContainElements adds the applicationEnvsDoesntContainElements to the get applications params
func (o *GetApplicationsParams) SetApplicationEnvsDoesntContainElements(applicationEnvsDoesntContainElements []string) {
	o.ApplicationEnvsDoesntContainElements = applicationEnvsDoesntContainElements
}

// WithApplicationLabelsContainElements adds the applicationLabelsContainElements to the get applications params
func (o *GetApplicationsParams) WithApplicationLabelsContainElements(applicationLabelsContainElements []string) *GetApplicationsParams {
	o.SetApplicationLabelsContainElements(applicationLabelsContainElements)
	return o
}

// SetApplicationLabelsContainElements adds the applicationLabelsContainElements to the get applications params
func (o *GetApplicationsParams) SetApplicationLabelsContainElements(applicationLabelsContainElements []string) {
	o.ApplicationLabelsContainElements = applicationLabelsContainElements
}

// WithApplicationLabelsDoesntContainElements adds the applicationLabelsDoesntContainElements to the get applications params
func (o *GetApplicationsParams) WithApplicationLabelsDoesntContainElements(applicationLabelsDoesntContainElements []string) *GetApplicationsParams {
	o.SetApplicationLabelsDoesntContainElements(applicationLabelsDoesntContainElements)
	return o
}

// SetApplicationLabelsDoesntContainElements adds the applicationLabelsDoesntContainElements to the get applications params
func (o *GetApplicationsParams) SetApplicationLabelsDoesntContainElements(applicationLabelsDoesntContainElements []string) {
	o.ApplicationLabelsDoesntContainElements = applicationLabelsDoesntContainElements
}

// WithApplicationNameContains adds the applicationNameContains to the get applications params
func (o *GetApplicationsParams) WithApplicationNameContains(applicationNameContains []string) *GetApplicationsParams {
	o.SetApplicationNameContains(applicationNameContains)
	return o
}

// SetApplicationNameContains adds the applicationNameContains to the get applications params
func (o *GetApplicationsParams) SetApplicationNameContains(applicationNameContains []string) {
	o.ApplicationNameContains = applicationNameContains
}

// WithApplicationNameEnd adds the applicationNameEnd to the get applications params
func (o *GetApplicationsParams) WithApplicationNameEnd(applicationNameEnd *string) *GetApplicationsParams {
	o.SetApplicationNameEnd(applicationNameEnd)
	return o
}

// SetApplicationNameEnd adds the applicationNameEnd to the get applications params
func (o *GetApplicationsParams) SetApplicationNameEnd(applicationNameEnd *string) {
	o.ApplicationNameEnd = applicationNameEnd
}

// WithApplicationNameIsNot adds the applicationNameIsNot to the get applications params
func (o *GetApplicationsParams) WithApplicationNameIsNot(applicationNameIsNot []string) *GetApplicationsParams {
	o.SetApplicationNameIsNot(applicationNameIsNot)
	return o
}

// SetApplicationNameIsNot adds the applicationNameIsNot to the get applications params
func (o *GetApplicationsParams) SetApplicationNameIsNot(applicationNameIsNot []string) {
	o.ApplicationNameIsNot = applicationNameIsNot
}

// WithApplicationNameIs adds the applicationNameIs to the get applications params
func (o *GetApplicationsParams) WithApplicationNameIs(applicationNameIs []string) *GetApplicationsParams {
	o.SetApplicationNameIs(applicationNameIs)
	return o
}

// SetApplicationNameIs adds the applicationNameIs to the get applications params
func (o *GetApplicationsParams) SetApplicationNameIs(applicationNameIs []string) {
	o.ApplicationNameIs = applicationNameIs
}

// WithApplicationNameStart adds the applicationNameStart to the get applications params
func (o *GetApplicationsParams) WithApplicationNameStart(applicationNameStart *string) *GetApplicationsParams {
	o.SetApplicationNameStart(applicationNameStart)
	return o
}

// SetApplicationNameStart adds the applicationNameStart to the get applications params
func (o *GetApplicationsParams) SetApplicationNameStart(applicationNameStart *string) {
	o.ApplicationNameStart = applicationNameStart
}

// WithApplicationResourceID adds the applicationResourceID to the get applications params
func (o *GetApplicationsParams) WithApplicationResourceID(applicationResourceID *string) *GetApplicationsParams {
	o.SetApplicationResourceID(applicationResourceID)
	return o
}

// SetApplicationResourceID adds the applicationResourceId to the get applications params
func (o *GetApplicationsParams) SetApplicationResourceID(applicationResourceID *string) {
	o.ApplicationResourceID = applicationResourceID
}

// WithApplicationResourcesGte adds the applicationResourcesGte to the get applications params
func (o *GetApplicationsParams) WithApplicationResourcesGte(applicationResourcesGte *int64) *GetApplicationsParams {
	o.SetApplicationResourcesGte(applicationResourcesGte)
	return o
}

// SetApplicationResourcesGte adds the applicationResourcesGte to the get applications params
func (o *GetApplicationsParams) SetApplicationResourcesGte(applicationResourcesGte *int64) {
	o.ApplicationResourcesGte = applicationResourcesGte
}

// WithApplicationResourcesIsNot adds the applicationResourcesIsNot to the get applications params
func (o *GetApplicationsParams) WithApplicationResourcesIsNot(applicationResourcesIsNot []int64) *GetApplicationsParams {
	o.SetApplicationResourcesIsNot(applicationResourcesIsNot)
	return o
}

// SetApplicationResourcesIsNot adds the applicationResourcesIsNot to the get applications params
func (o *GetApplicationsParams) SetApplicationResourcesIsNot(applicationResourcesIsNot []int64) {
	o.ApplicationResourcesIsNot = applicationResourcesIsNot
}

// WithApplicationResourcesIs adds the applicationResourcesIs to the get applications params
func (o *GetApplicationsParams) WithApplicationResourcesIs(applicationResourcesIs []int64) *GetApplicationsParams {
	o.SetApplicationResourcesIs(applicationResourcesIs)
	return o
}

// SetApplicationResourcesIs adds the applicationResourcesIs to the get applications params
func (o *GetApplicationsParams) SetApplicationResourcesIs(applicationResourcesIs []int64) {
	o.ApplicationResourcesIs = applicationResourcesIs
}

// WithApplicationResourcesLte adds the applicationResourcesLte to the get applications params
func (o *GetApplicationsParams) WithApplicationResourcesLte(applicationResourcesLte *int64) *GetApplicationsParams {
	o.SetApplicationResourcesLte(applicationResourcesLte)
	return o
}

// SetApplicationResourcesLte adds the applicationResourcesLte to the get applications params
func (o *GetApplicationsParams) SetApplicationResourcesLte(applicationResourcesLte *int64) {
	o.ApplicationResourcesLte = applicationResourcesLte
}

// WithApplicationTypeIs adds the applicationTypeIs to the get applications params
func (o *GetApplicationsParams) WithApplicationTypeIs(applicationTypeIs []string) *GetApplicationsParams {
	o.SetApplicationTypeIs(applicationTypeIs)
	return o
}

// SetApplicationTypeIs adds the applicationTypeIs to the get applications params
func (o *GetApplicationsParams) SetApplicationTypeIs(applicationTypeIs []string) {
	o.ApplicationTypeIs = applicationTypeIs
}

// WithCisDockerBenchmarkLevelGte adds the cisDockerBenchmarkLevelGte to the get applications params
func (o *GetApplicationsParams) WithCisDockerBenchmarkLevelGte(cisDockerBenchmarkLevelGte *string) *GetApplicationsParams {
	o.SetCisDockerBenchmarkLevelGte(cisDockerBenchmarkLevelGte)
	return o
}

// SetCisDockerBenchmarkLevelGte adds the cisDockerBenchmarkLevelGte to the get applications params
func (o *GetApplicationsParams) SetCisDockerBenchmarkLevelGte(cisDockerBenchmarkLevelGte *string) {
	o.CisDockerBenchmarkLevelGte = cisDockerBenchmarkLevelGte
}

// WithCisDockerBenchmarkLevelLte adds the cisDockerBenchmarkLevelLte to the get applications params
func (o *GetApplicationsParams) WithCisDockerBenchmarkLevelLte(cisDockerBenchmarkLevelLte *string) *GetApplicationsParams {
	o.SetCisDockerBenchmarkLevelLte(cisDockerBenchmarkLevelLte)
	return o
}

// SetCisDockerBenchmarkLevelLte adds the cisDockerBenchmarkLevelLte to the get applications params
func (o *GetApplicationsParams) SetCisDockerBenchmarkLevelLte(cisDockerBenchmarkLevelLte *string) {
	o.CisDockerBenchmarkLevelLte = cisDockerBenchmarkLevelLte
}

// WithCurrentRuntimeScan adds the currentRuntimeScan to the get applications params
func (o *GetApplicationsParams) WithCurrentRuntimeScan(currentRuntimeScan *bool) *GetApplicationsParams {
	o.SetCurrentRuntimeScan(currentRuntimeScan)
	return o
}

// SetCurrentRuntimeScan adds the currentRuntimeScan to the get applications params
func (o *GetApplicationsParams) SetCurrentRuntimeScan(currentRuntimeScan *bool) {
	o.CurrentRuntimeScan = currentRuntimeScan
}

// WithPackageID adds the packageID to the get applications params
func (o *GetApplicationsParams) WithPackageID(packageID *string) *GetApplicationsParams {
	o.SetPackageID(packageID)
	return o
}

// SetPackageID adds the packageId to the get applications params
func (o *GetApplicationsParams) SetPackageID(packageID *string) {
	o.PackageID = packageID
}

// WithPackagesGte adds the packagesGte to the get applications params
func (o *GetApplicationsParams) WithPackagesGte(packagesGte *int64) *GetApplicationsParams {
	o.SetPackagesGte(packagesGte)
	return o
}

// SetPackagesGte adds the packagesGte to the get applications params
func (o *GetApplicationsParams) SetPackagesGte(packagesGte *int64) {
	o.PackagesGte = packagesGte
}

// WithPackagesIsNot adds the packagesIsNot to the get applications params
func (o *GetApplicationsParams) WithPackagesIsNot(packagesIsNot []int64) *GetApplicationsParams {
	o.SetPackagesIsNot(packagesIsNot)
	return o
}

// SetPackagesIsNot adds the packagesIsNot to the get applications params
func (o *GetApplicationsParams) SetPackagesIsNot(packagesIsNot []int64) {
	o.PackagesIsNot = packagesIsNot
}

// WithPackagesIs adds the packagesIs to the get applications params
func (o *GetApplicationsParams) WithPackagesIs(packagesIs []int64) *GetApplicationsParams {
	o.SetPackagesIs(packagesIs)
	return o
}

// SetPackagesIs adds the packagesIs to the get applications params
func (o *GetApplicationsParams) SetPackagesIs(packagesIs []int64) {
	o.PackagesIs = packagesIs
}

// WithPackagesLte adds the packagesLte to the get applications params
func (o *GetApplicationsParams) WithPackagesLte(packagesLte *int64) *GetApplicationsParams {
	o.SetPackagesLte(packagesLte)
	return o
}

// SetPackagesLte adds the packagesLte to the get applications params
func (o *GetApplicationsParams) SetPackagesLte(packagesLte *int64) {
	o.PackagesLte = packagesLte
}

// WithPage adds the page to the get applications params
func (o *GetApplicationsParams) WithPage(page int64) *GetApplicationsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get applications params
func (o *GetApplicationsParams) SetPage(page int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get applications params
func (o *GetApplicationsParams) WithPageSize(pageSize int64) *GetApplicationsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get applications params
func (o *GetApplicationsParams) SetPageSize(pageSize int64) {
	o.PageSize = pageSize
}

// WithSortDir adds the sortDir to the get applications params
func (o *GetApplicationsParams) WithSortDir(sortDir *string) *GetApplicationsParams {
	o.SetSortDir(sortDir)
	return o
}

// SetSortDir adds the sortDir to the get applications params
func (o *GetApplicationsParams) SetSortDir(sortDir *string) {
	o.SortDir = sortDir
}

// WithSortKey adds the sortKey to the get applications params
func (o *GetApplicationsParams) WithSortKey(sortKey string) *GetApplicationsParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the get applications params
func (o *GetApplicationsParams) SetSortKey(sortKey string) {
	o.SortKey = sortKey
}

// WithVulnerabilitySeverityGte adds the vulnerabilitySeverityGte to the get applications params
func (o *GetApplicationsParams) WithVulnerabilitySeverityGte(vulnerabilitySeverityGte *string) *GetApplicationsParams {
	o.SetVulnerabilitySeverityGte(vulnerabilitySeverityGte)
	return o
}

// SetVulnerabilitySeverityGte adds the vulnerabilitySeverityGte to the get applications params
func (o *GetApplicationsParams) SetVulnerabilitySeverityGte(vulnerabilitySeverityGte *string) {
	o.VulnerabilitySeverityGte = vulnerabilitySeverityGte
}

// WithVulnerabilitySeverityLte adds the vulnerabilitySeverityLte to the get applications params
func (o *GetApplicationsParams) WithVulnerabilitySeverityLte(vulnerabilitySeverityLte *string) *GetApplicationsParams {
	o.SetVulnerabilitySeverityLte(vulnerabilitySeverityLte)
	return o
}

// SetVulnerabilitySeverityLte adds the vulnerabilitySeverityLte to the get applications params
func (o *GetApplicationsParams) SetVulnerabilitySeverityLte(vulnerabilitySeverityLte *string) {
	o.VulnerabilitySeverityLte = vulnerabilitySeverityLte
}

// WriteToRequest writes these params to a swagger request
func (o *GetApplicationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationEnvsContainElements != nil {

		// binding items for applicationEnvs[containElements]
		joinedApplicationEnvsContainElements := o.bindParamApplicationEnvsContainElements(reg)

		// query array param applicationEnvs[containElements]
		if err := r.SetQueryParam("applicationEnvs[containElements]", joinedApplicationEnvsContainElements...); err != nil {
			return err
		}
	}

	if o.ApplicationEnvsDoesntContainElements != nil {

		// binding items for applicationEnvs[doesntContainElements]
		joinedApplicationEnvsDoesntContainElements := o.bindParamApplicationEnvsDoesntContainElements(reg)

		// query array param applicationEnvs[doesntContainElements]
		if err := r.SetQueryParam("applicationEnvs[doesntContainElements]", joinedApplicationEnvsDoesntContainElements...); err != nil {
			return err
		}
	}

	if o.ApplicationLabelsContainElements != nil {

		// binding items for applicationLabels[containElements]
		joinedApplicationLabelsContainElements := o.bindParamApplicationLabelsContainElements(reg)

		// query array param applicationLabels[containElements]
		if err := r.SetQueryParam("applicationLabels[containElements]", joinedApplicationLabelsContainElements...); err != nil {
			return err
		}
	}

	if o.ApplicationLabelsDoesntContainElements != nil {

		// binding items for applicationLabels[doesntContainElements]
		joinedApplicationLabelsDoesntContainElements := o.bindParamApplicationLabelsDoesntContainElements(reg)

		// query array param applicationLabels[doesntContainElements]
		if err := r.SetQueryParam("applicationLabels[doesntContainElements]", joinedApplicationLabelsDoesntContainElements...); err != nil {
			return err
		}
	}

	if o.ApplicationNameContains != nil {

		// binding items for applicationName[contains]
		joinedApplicationNameContains := o.bindParamApplicationNameContains(reg)

		// query array param applicationName[contains]
		if err := r.SetQueryParam("applicationName[contains]", joinedApplicationNameContains...); err != nil {
			return err
		}
	}

	if o.ApplicationNameEnd != nil {

		// query param applicationName[end]
		var qrApplicationNameEnd string

		if o.ApplicationNameEnd != nil {
			qrApplicationNameEnd = *o.ApplicationNameEnd
		}
		qApplicationNameEnd := qrApplicationNameEnd
		if qApplicationNameEnd != "" {

			if err := r.SetQueryParam("applicationName[end]", qApplicationNameEnd); err != nil {
				return err
			}
		}
	}

	if o.ApplicationNameIsNot != nil {

		// binding items for applicationName[isNot]
		joinedApplicationNameIsNot := o.bindParamApplicationNameIsNot(reg)

		// query array param applicationName[isNot]
		if err := r.SetQueryParam("applicationName[isNot]", joinedApplicationNameIsNot...); err != nil {
			return err
		}
	}

	if o.ApplicationNameIs != nil {

		// binding items for applicationName[is]
		joinedApplicationNameIs := o.bindParamApplicationNameIs(reg)

		// query array param applicationName[is]
		if err := r.SetQueryParam("applicationName[is]", joinedApplicationNameIs...); err != nil {
			return err
		}
	}

	if o.ApplicationNameStart != nil {

		// query param applicationName[start]
		var qrApplicationNameStart string

		if o.ApplicationNameStart != nil {
			qrApplicationNameStart = *o.ApplicationNameStart
		}
		qApplicationNameStart := qrApplicationNameStart
		if qApplicationNameStart != "" {

			if err := r.SetQueryParam("applicationName[start]", qApplicationNameStart); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourceID != nil {

		// query param applicationResourceID
		var qrApplicationResourceID string

		if o.ApplicationResourceID != nil {
			qrApplicationResourceID = *o.ApplicationResourceID
		}
		qApplicationResourceID := qrApplicationResourceID
		if qApplicationResourceID != "" {

			if err := r.SetQueryParam("applicationResourceID", qApplicationResourceID); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourcesGte != nil {

		// query param applicationResources[gte]
		var qrApplicationResourcesGte int64

		if o.ApplicationResourcesGte != nil {
			qrApplicationResourcesGte = *o.ApplicationResourcesGte
		}
		qApplicationResourcesGte := swag.FormatInt64(qrApplicationResourcesGte)
		if qApplicationResourcesGte != "" {

			if err := r.SetQueryParam("applicationResources[gte]", qApplicationResourcesGte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourcesIsNot != nil {

		// binding items for applicationResources[isNot]
		joinedApplicationResourcesIsNot := o.bindParamApplicationResourcesIsNot(reg)

		// query array param applicationResources[isNot]
		if err := r.SetQueryParam("applicationResources[isNot]", joinedApplicationResourcesIsNot...); err != nil {
			return err
		}
	}

	if o.ApplicationResourcesIs != nil {

		// binding items for applicationResources[is]
		joinedApplicationResourcesIs := o.bindParamApplicationResourcesIs(reg)

		// query array param applicationResources[is]
		if err := r.SetQueryParam("applicationResources[is]", joinedApplicationResourcesIs...); err != nil {
			return err
		}
	}

	if o.ApplicationResourcesLte != nil {

		// query param applicationResources[lte]
		var qrApplicationResourcesLte int64

		if o.ApplicationResourcesLte != nil {
			qrApplicationResourcesLte = *o.ApplicationResourcesLte
		}
		qApplicationResourcesLte := swag.FormatInt64(qrApplicationResourcesLte)
		if qApplicationResourcesLte != "" {

			if err := r.SetQueryParam("applicationResources[lte]", qApplicationResourcesLte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationTypeIs != nil {

		// binding items for applicationType[is]
		joinedApplicationTypeIs := o.bindParamApplicationTypeIs(reg)

		// query array param applicationType[is]
		if err := r.SetQueryParam("applicationType[is]", joinedApplicationTypeIs...); err != nil {
			return err
		}
	}

	if o.CisDockerBenchmarkLevelGte != nil {

		// query param cisDockerBenchmarkLevel[gte]
		var qrCisDockerBenchmarkLevelGte string

		if o.CisDockerBenchmarkLevelGte != nil {
			qrCisDockerBenchmarkLevelGte = *o.CisDockerBenchmarkLevelGte
		}
		qCisDockerBenchmarkLevelGte := qrCisDockerBenchmarkLevelGte
		if qCisDockerBenchmarkLevelGte != "" {

			if err := r.SetQueryParam("cisDockerBenchmarkLevel[gte]", qCisDockerBenchmarkLevelGte); err != nil {
				return err
			}
		}
	}

	if o.CisDockerBenchmarkLevelLte != nil {

		// query param cisDockerBenchmarkLevel[lte]
		var qrCisDockerBenchmarkLevelLte string

		if o.CisDockerBenchmarkLevelLte != nil {
			qrCisDockerBenchmarkLevelLte = *o.CisDockerBenchmarkLevelLte
		}
		qCisDockerBenchmarkLevelLte := qrCisDockerBenchmarkLevelLte
		if qCisDockerBenchmarkLevelLte != "" {

			if err := r.SetQueryParam("cisDockerBenchmarkLevel[lte]", qCisDockerBenchmarkLevelLte); err != nil {
				return err
			}
		}
	}

	if o.CurrentRuntimeScan != nil {

		// query param currentRuntimeScan
		var qrCurrentRuntimeScan bool

		if o.CurrentRuntimeScan != nil {
			qrCurrentRuntimeScan = *o.CurrentRuntimeScan
		}
		qCurrentRuntimeScan := swag.FormatBool(qrCurrentRuntimeScan)
		if qCurrentRuntimeScan != "" {

			if err := r.SetQueryParam("currentRuntimeScan", qCurrentRuntimeScan); err != nil {
				return err
			}
		}
	}

	if o.PackageID != nil {

		// query param packageID
		var qrPackageID string

		if o.PackageID != nil {
			qrPackageID = *o.PackageID
		}
		qPackageID := qrPackageID
		if qPackageID != "" {

			if err := r.SetQueryParam("packageID", qPackageID); err != nil {
				return err
			}
		}
	}

	if o.PackagesGte != nil {

		// query param packages[gte]
		var qrPackagesGte int64

		if o.PackagesGte != nil {
			qrPackagesGte = *o.PackagesGte
		}
		qPackagesGte := swag.FormatInt64(qrPackagesGte)
		if qPackagesGte != "" {

			if err := r.SetQueryParam("packages[gte]", qPackagesGte); err != nil {
				return err
			}
		}
	}

	if o.PackagesIsNot != nil {

		// binding items for packages[isNot]
		joinedPackagesIsNot := o.bindParamPackagesIsNot(reg)

		// query array param packages[isNot]
		if err := r.SetQueryParam("packages[isNot]", joinedPackagesIsNot...); err != nil {
			return err
		}
	}

	if o.PackagesIs != nil {

		// binding items for packages[is]
		joinedPackagesIs := o.bindParamPackagesIs(reg)

		// query array param packages[is]
		if err := r.SetQueryParam("packages[is]", joinedPackagesIs...); err != nil {
			return err
		}
	}

	if o.PackagesLte != nil {

		// query param packages[lte]
		var qrPackagesLte int64

		if o.PackagesLte != nil {
			qrPackagesLte = *o.PackagesLte
		}
		qPackagesLte := swag.FormatInt64(qrPackagesLte)
		if qPackagesLte != "" {

			if err := r.SetQueryParam("packages[lte]", qPackagesLte); err != nil {
				return err
			}
		}
	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" {

		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := swag.FormatInt64(qrPageSize)
	if qPageSize != "" {

		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	if o.SortDir != nil {

		// query param sortDir
		var qrSortDir string

		if o.SortDir != nil {
			qrSortDir = *o.SortDir
		}
		qSortDir := qrSortDir
		if qSortDir != "" {

			if err := r.SetQueryParam("sortDir", qSortDir); err != nil {
				return err
			}
		}
	}

	// query param sortKey
	qrSortKey := o.SortKey
	qSortKey := qrSortKey
	if qSortKey != "" {

		if err := r.SetQueryParam("sortKey", qSortKey); err != nil {
			return err
		}
	}

	if o.VulnerabilitySeverityGte != nil {

		// query param vulnerabilitySeverity[gte]
		var qrVulnerabilitySeverityGte string

		if o.VulnerabilitySeverityGte != nil {
			qrVulnerabilitySeverityGte = *o.VulnerabilitySeverityGte
		}
		qVulnerabilitySeverityGte := qrVulnerabilitySeverityGte
		if qVulnerabilitySeverityGte != "" {

			if err := r.SetQueryParam("vulnerabilitySeverity[gte]", qVulnerabilitySeverityGte); err != nil {
				return err
			}
		}
	}

	if o.VulnerabilitySeverityLte != nil {

		// query param vulnerabilitySeverity[lte]
		var qrVulnerabilitySeverityLte string

		if o.VulnerabilitySeverityLte != nil {
			qrVulnerabilitySeverityLte = *o.VulnerabilitySeverityLte
		}
		qVulnerabilitySeverityLte := qrVulnerabilitySeverityLte
		if qVulnerabilitySeverityLte != "" {

			if err := r.SetQueryParam("vulnerabilitySeverity[lte]", qVulnerabilitySeverityLte); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetApplications binds the parameter applicationEnvs[containElements]
func (o *GetApplicationsParams) bindParamApplicationEnvsContainElements(formats strfmt.Registry) []string {
	applicationEnvsContainElementsIR := o.ApplicationEnvsContainElements

	var applicationEnvsContainElementsIC []string
	for _, applicationEnvsContainElementsIIR := range applicationEnvsContainElementsIR { // explode []string

		applicationEnvsContainElementsIIV := applicationEnvsContainElementsIIR // string as string
		applicationEnvsContainElementsIC = append(applicationEnvsContainElementsIC, applicationEnvsContainElementsIIV)
	}

	// items.CollectionFormat: ""
	applicationEnvsContainElementsIS := swag.JoinByFormat(applicationEnvsContainElementsIC, "")

	return applicationEnvsContainElementsIS
}

// bindParamGetApplications binds the parameter applicationEnvs[doesntContainElements]
func (o *GetApplicationsParams) bindParamApplicationEnvsDoesntContainElements(formats strfmt.Registry) []string {
	applicationEnvsDoesntContainElementsIR := o.ApplicationEnvsDoesntContainElements

	var applicationEnvsDoesntContainElementsIC []string
	for _, applicationEnvsDoesntContainElementsIIR := range applicationEnvsDoesntContainElementsIR { // explode []string

		applicationEnvsDoesntContainElementsIIV := applicationEnvsDoesntContainElementsIIR // string as string
		applicationEnvsDoesntContainElementsIC = append(applicationEnvsDoesntContainElementsIC, applicationEnvsDoesntContainElementsIIV)
	}

	// items.CollectionFormat: ""
	applicationEnvsDoesntContainElementsIS := swag.JoinByFormat(applicationEnvsDoesntContainElementsIC, "")

	return applicationEnvsDoesntContainElementsIS
}

// bindParamGetApplications binds the parameter applicationLabels[containElements]
func (o *GetApplicationsParams) bindParamApplicationLabelsContainElements(formats strfmt.Registry) []string {
	applicationLabelsContainElementsIR := o.ApplicationLabelsContainElements

	var applicationLabelsContainElementsIC []string
	for _, applicationLabelsContainElementsIIR := range applicationLabelsContainElementsIR { // explode []string

		applicationLabelsContainElementsIIV := applicationLabelsContainElementsIIR // string as string
		applicationLabelsContainElementsIC = append(applicationLabelsContainElementsIC, applicationLabelsContainElementsIIV)
	}

	// items.CollectionFormat: ""
	applicationLabelsContainElementsIS := swag.JoinByFormat(applicationLabelsContainElementsIC, "")

	return applicationLabelsContainElementsIS
}

// bindParamGetApplications binds the parameter applicationLabels[doesntContainElements]
func (o *GetApplicationsParams) bindParamApplicationLabelsDoesntContainElements(formats strfmt.Registry) []string {
	applicationLabelsDoesntContainElementsIR := o.ApplicationLabelsDoesntContainElements

	var applicationLabelsDoesntContainElementsIC []string
	for _, applicationLabelsDoesntContainElementsIIR := range applicationLabelsDoesntContainElementsIR { // explode []string

		applicationLabelsDoesntContainElementsIIV := applicationLabelsDoesntContainElementsIIR // string as string
		applicationLabelsDoesntContainElementsIC = append(applicationLabelsDoesntContainElementsIC, applicationLabelsDoesntContainElementsIIV)
	}

	// items.CollectionFormat: ""
	applicationLabelsDoesntContainElementsIS := swag.JoinByFormat(applicationLabelsDoesntContainElementsIC, "")

	return applicationLabelsDoesntContainElementsIS
}

// bindParamGetApplications binds the parameter applicationName[contains]
func (o *GetApplicationsParams) bindParamApplicationNameContains(formats strfmt.Registry) []string {
	applicationNameContainsIR := o.ApplicationNameContains

	var applicationNameContainsIC []string
	for _, applicationNameContainsIIR := range applicationNameContainsIR { // explode []string

		applicationNameContainsIIV := applicationNameContainsIIR // string as string
		applicationNameContainsIC = append(applicationNameContainsIC, applicationNameContainsIIV)
	}

	// items.CollectionFormat: ""
	applicationNameContainsIS := swag.JoinByFormat(applicationNameContainsIC, "")

	return applicationNameContainsIS
}

// bindParamGetApplications binds the parameter applicationName[isNot]
func (o *GetApplicationsParams) bindParamApplicationNameIsNot(formats strfmt.Registry) []string {
	applicationNameIsNotIR := o.ApplicationNameIsNot

	var applicationNameIsNotIC []string
	for _, applicationNameIsNotIIR := range applicationNameIsNotIR { // explode []string

		applicationNameIsNotIIV := applicationNameIsNotIIR // string as string
		applicationNameIsNotIC = append(applicationNameIsNotIC, applicationNameIsNotIIV)
	}

	// items.CollectionFormat: ""
	applicationNameIsNotIS := swag.JoinByFormat(applicationNameIsNotIC, "")

	return applicationNameIsNotIS
}

// bindParamGetApplications binds the parameter applicationName[is]
func (o *GetApplicationsParams) bindParamApplicationNameIs(formats strfmt.Registry) []string {
	applicationNameIsIR := o.ApplicationNameIs

	var applicationNameIsIC []string
	for _, applicationNameIsIIR := range applicationNameIsIR { // explode []string

		applicationNameIsIIV := applicationNameIsIIR // string as string
		applicationNameIsIC = append(applicationNameIsIC, applicationNameIsIIV)
	}

	// items.CollectionFormat: ""
	applicationNameIsIS := swag.JoinByFormat(applicationNameIsIC, "")

	return applicationNameIsIS
}

// bindParamGetApplications binds the parameter applicationResources[isNot]
func (o *GetApplicationsParams) bindParamApplicationResourcesIsNot(formats strfmt.Registry) []string {
	applicationResourcesIsNotIR := o.ApplicationResourcesIsNot

	var applicationResourcesIsNotIC []string
	for _, applicationResourcesIsNotIIR := range applicationResourcesIsNotIR { // explode []int64

		applicationResourcesIsNotIIV := swag.FormatInt64(applicationResourcesIsNotIIR) // int64 as string
		applicationResourcesIsNotIC = append(applicationResourcesIsNotIC, applicationResourcesIsNotIIV)
	}

	// items.CollectionFormat: ""
	applicationResourcesIsNotIS := swag.JoinByFormat(applicationResourcesIsNotIC, "")

	return applicationResourcesIsNotIS
}

// bindParamGetApplications binds the parameter applicationResources[is]
func (o *GetApplicationsParams) bindParamApplicationResourcesIs(formats strfmt.Registry) []string {
	applicationResourcesIsIR := o.ApplicationResourcesIs

	var applicationResourcesIsIC []string
	for _, applicationResourcesIsIIR := range applicationResourcesIsIR { // explode []int64

		applicationResourcesIsIIV := swag.FormatInt64(applicationResourcesIsIIR) // int64 as string
		applicationResourcesIsIC = append(applicationResourcesIsIC, applicationResourcesIsIIV)
	}

	// items.CollectionFormat: ""
	applicationResourcesIsIS := swag.JoinByFormat(applicationResourcesIsIC, "")

	return applicationResourcesIsIS
}

// bindParamGetApplications binds the parameter applicationType[is]
func (o *GetApplicationsParams) bindParamApplicationTypeIs(formats strfmt.Registry) []string {
	applicationTypeIsIR := o.ApplicationTypeIs

	var applicationTypeIsIC []string
	for _, applicationTypeIsIIR := range applicationTypeIsIR { // explode []string

		applicationTypeIsIIV := applicationTypeIsIIR // string as string
		applicationTypeIsIC = append(applicationTypeIsIC, applicationTypeIsIIV)
	}

	// items.CollectionFormat: ""
	applicationTypeIsIS := swag.JoinByFormat(applicationTypeIsIC, "")

	return applicationTypeIsIS
}

// bindParamGetApplications binds the parameter packages[isNot]
func (o *GetApplicationsParams) bindParamPackagesIsNot(formats strfmt.Registry) []string {
	packagesIsNotIR := o.PackagesIsNot

	var packagesIsNotIC []string
	for _, packagesIsNotIIR := range packagesIsNotIR { // explode []int64

		packagesIsNotIIV := swag.FormatInt64(packagesIsNotIIR) // int64 as string
		packagesIsNotIC = append(packagesIsNotIC, packagesIsNotIIV)
	}

	// items.CollectionFormat: ""
	packagesIsNotIS := swag.JoinByFormat(packagesIsNotIC, "")

	return packagesIsNotIS
}

// bindParamGetApplications binds the parameter packages[is]
func (o *GetApplicationsParams) bindParamPackagesIs(formats strfmt.Registry) []string {
	packagesIsIR := o.PackagesIs

	var packagesIsIC []string
	for _, packagesIsIIR := range packagesIsIR { // explode []int64

		packagesIsIIV := swag.FormatInt64(packagesIsIIR) // int64 as string
		packagesIsIC = append(packagesIsIC, packagesIsIIV)
	}

	// items.CollectionFormat: ""
	packagesIsIS := swag.JoinByFormat(packagesIsIC, "")

	return packagesIsIS
}
