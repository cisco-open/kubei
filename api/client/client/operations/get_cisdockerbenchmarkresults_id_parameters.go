// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetCisdockerbenchmarkresultsIDParams creates a new GetCisdockerbenchmarkresultsIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCisdockerbenchmarkresultsIDParams() *GetCisdockerbenchmarkresultsIDParams {
	return &GetCisdockerbenchmarkresultsIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCisdockerbenchmarkresultsIDParamsWithTimeout creates a new GetCisdockerbenchmarkresultsIDParams object
// with the ability to set a timeout on a request.
func NewGetCisdockerbenchmarkresultsIDParamsWithTimeout(timeout time.Duration) *GetCisdockerbenchmarkresultsIDParams {
	return &GetCisdockerbenchmarkresultsIDParams{
		timeout: timeout,
	}
}

// NewGetCisdockerbenchmarkresultsIDParamsWithContext creates a new GetCisdockerbenchmarkresultsIDParams object
// with the ability to set a context for a request.
func NewGetCisdockerbenchmarkresultsIDParamsWithContext(ctx context.Context) *GetCisdockerbenchmarkresultsIDParams {
	return &GetCisdockerbenchmarkresultsIDParams{
		Context: ctx,
	}
}

// NewGetCisdockerbenchmarkresultsIDParamsWithHTTPClient creates a new GetCisdockerbenchmarkresultsIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCisdockerbenchmarkresultsIDParamsWithHTTPClient(client *http.Client) *GetCisdockerbenchmarkresultsIDParams {
	return &GetCisdockerbenchmarkresultsIDParams{
		HTTPClient: client,
	}
}

/* GetCisdockerbenchmarkresultsIDParams contains all the parameters to send to the API endpoint
   for the get cisdockerbenchmarkresults ID operation.

   Typically these are written to a http.Request.
*/
type GetCisdockerbenchmarkresultsIDParams struct {

	// ID.
	ID string

	/* SortDir.

	   Sorting direction

	   Default: "ASC"
	*/
	SortDir *string

	/* SortKey.

	   Sort key
	*/
	SortKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get cisdockerbenchmarkresults ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCisdockerbenchmarkresultsIDParams) WithDefaults() *GetCisdockerbenchmarkresultsIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get cisdockerbenchmarkresults ID params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCisdockerbenchmarkresultsIDParams) SetDefaults() {
	var (
		sortDirDefault = string("ASC")
	)

	val := GetCisdockerbenchmarkresultsIDParams{
		SortDir: &sortDirDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) WithTimeout(timeout time.Duration) *GetCisdockerbenchmarkresultsIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) WithContext(ctx context.Context) *GetCisdockerbenchmarkresultsIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) WithHTTPClient(client *http.Client) *GetCisdockerbenchmarkresultsIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) WithID(id string) *GetCisdockerbenchmarkresultsIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) SetID(id string) {
	o.ID = id
}

// WithSortDir adds the sortDir to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) WithSortDir(sortDir *string) *GetCisdockerbenchmarkresultsIDParams {
	o.SetSortDir(sortDir)
	return o
}

// SetSortDir adds the sortDir to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) SetSortDir(sortDir *string) {
	o.SortDir = sortDir
}

// WithSortKey adds the sortKey to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) WithSortKey(sortKey string) *GetCisdockerbenchmarkresultsIDParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the get cisdockerbenchmarkresults ID params
func (o *GetCisdockerbenchmarkresultsIDParams) SetSortKey(sortKey string) {
	o.SortKey = sortKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetCisdockerbenchmarkresultsIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.SortDir != nil {

		// query param sortDir
		var qrSortDir string

		if o.SortDir != nil {
			qrSortDir = *o.SortDir
		}
		qSortDir := qrSortDir
		if qSortDir != "" {

			if err := r.SetQueryParam("sortDir", qSortDir); err != nil {
				return err
			}
		}
	}

	// query param sortKey
	qrSortKey := o.SortKey
	qSortKey := qrSortKey
	if qSortKey != "" {

		if err := r.SetQueryParam("sortKey", qSortKey); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
