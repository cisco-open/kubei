// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetApplicationResourcesParams creates a new GetApplicationResourcesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetApplicationResourcesParams() *GetApplicationResourcesParams {
	return &GetApplicationResourcesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetApplicationResourcesParamsWithTimeout creates a new GetApplicationResourcesParams object
// with the ability to set a timeout on a request.
func NewGetApplicationResourcesParamsWithTimeout(timeout time.Duration) *GetApplicationResourcesParams {
	return &GetApplicationResourcesParams{
		timeout: timeout,
	}
}

// NewGetApplicationResourcesParamsWithContext creates a new GetApplicationResourcesParams object
// with the ability to set a context for a request.
func NewGetApplicationResourcesParamsWithContext(ctx context.Context) *GetApplicationResourcesParams {
	return &GetApplicationResourcesParams{
		Context: ctx,
	}
}

// NewGetApplicationResourcesParamsWithHTTPClient creates a new GetApplicationResourcesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetApplicationResourcesParamsWithHTTPClient(client *http.Client) *GetApplicationResourcesParams {
	return &GetApplicationResourcesParams{
		HTTPClient: client,
	}
}

/* GetApplicationResourcesParams contains all the parameters to send to the API endpoint
   for the get application resources operation.

   Typically these are written to a http.Request.
*/
type GetApplicationResourcesParams struct {

	/* ApplicationID.

	   application ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	ApplicationID *string

	/* ApplicationsGte.

	   greater than or equal
	*/
	ApplicationsGte *int64

	// ApplicationsIsNot.
	ApplicationsIsNot []int64

	// ApplicationsIs.
	ApplicationsIs []int64

	/* ApplicationsLte.

	   less than or equal
	*/
	ApplicationsLte *int64

	// CisDockerBenchmarkLevelGte.
	CisDockerBenchmarkLevelGte *string

	// CisDockerBenchmarkLevelLte.
	CisDockerBenchmarkLevelLte *string

	/* CurrentRuntimeScan.

	   current runtime scan system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	CurrentRuntimeScan *bool

	/* PackageID.

	   package ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	PackageID *string

	/* PackagesGte.

	   greater than or equal
	*/
	PackagesGte *int64

	// PackagesIsNot.
	PackagesIsNot []int64

	// PackagesIs.
	PackagesIs []int64

	/* PackagesLte.

	   less than or equal
	*/
	PackagesLte *int64

	/* Page.

	   Page number of the query
	*/
	Page int64

	/* PageSize.

	   Maximum items to return
	*/
	PageSize int64

	// ReportingSBOMAnalyzersContainElements.
	ReportingSBOMAnalyzersContainElements []string

	// ReportingSBOMAnalyzersDoesntContainElements.
	ReportingSBOMAnalyzersDoesntContainElements []string

	// ResourceHashContains.
	ResourceHashContains []string

	// ResourceHashEnd.
	ResourceHashEnd *string

	// ResourceHashIsNot.
	ResourceHashIsNot []string

	// ResourceHashIs.
	ResourceHashIs []string

	// ResourceHashStart.
	ResourceHashStart *string

	// ResourceNameContains.
	ResourceNameContains []string

	// ResourceNameEnd.
	ResourceNameEnd *string

	// ResourceNameIsNot.
	ResourceNameIsNot []string

	// ResourceNameIs.
	ResourceNameIs []string

	// ResourceNameStart.
	ResourceNameStart *string

	// ResourceTypeIs.
	ResourceTypeIs []string

	/* SortDir.

	   Sorting direction

	   Default: "ASC"
	*/
	SortDir *string

	/* SortKey.

	   Sort key
	*/
	SortKey string

	// VulnerabilitySeverityGte.
	VulnerabilitySeverityGte *string

	// VulnerabilitySeverityLte.
	VulnerabilitySeverityLte *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get application resources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetApplicationResourcesParams) WithDefaults() *GetApplicationResourcesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get application resources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetApplicationResourcesParams) SetDefaults() {
	var (
		sortDirDefault = string("ASC")
	)

	val := GetApplicationResourcesParams{
		SortDir: &sortDirDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get application resources params
func (o *GetApplicationResourcesParams) WithTimeout(timeout time.Duration) *GetApplicationResourcesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get application resources params
func (o *GetApplicationResourcesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get application resources params
func (o *GetApplicationResourcesParams) WithContext(ctx context.Context) *GetApplicationResourcesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get application resources params
func (o *GetApplicationResourcesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get application resources params
func (o *GetApplicationResourcesParams) WithHTTPClient(client *http.Client) *GetApplicationResourcesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get application resources params
func (o *GetApplicationResourcesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the get application resources params
func (o *GetApplicationResourcesParams) WithApplicationID(applicationID *string) *GetApplicationResourcesParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get application resources params
func (o *GetApplicationResourcesParams) SetApplicationID(applicationID *string) {
	o.ApplicationID = applicationID
}

// WithApplicationsGte adds the applicationsGte to the get application resources params
func (o *GetApplicationResourcesParams) WithApplicationsGte(applicationsGte *int64) *GetApplicationResourcesParams {
	o.SetApplicationsGte(applicationsGte)
	return o
}

// SetApplicationsGte adds the applicationsGte to the get application resources params
func (o *GetApplicationResourcesParams) SetApplicationsGte(applicationsGte *int64) {
	o.ApplicationsGte = applicationsGte
}

// WithApplicationsIsNot adds the applicationsIsNot to the get application resources params
func (o *GetApplicationResourcesParams) WithApplicationsIsNot(applicationsIsNot []int64) *GetApplicationResourcesParams {
	o.SetApplicationsIsNot(applicationsIsNot)
	return o
}

// SetApplicationsIsNot adds the applicationsIsNot to the get application resources params
func (o *GetApplicationResourcesParams) SetApplicationsIsNot(applicationsIsNot []int64) {
	o.ApplicationsIsNot = applicationsIsNot
}

// WithApplicationsIs adds the applicationsIs to the get application resources params
func (o *GetApplicationResourcesParams) WithApplicationsIs(applicationsIs []int64) *GetApplicationResourcesParams {
	o.SetApplicationsIs(applicationsIs)
	return o
}

// SetApplicationsIs adds the applicationsIs to the get application resources params
func (o *GetApplicationResourcesParams) SetApplicationsIs(applicationsIs []int64) {
	o.ApplicationsIs = applicationsIs
}

// WithApplicationsLte adds the applicationsLte to the get application resources params
func (o *GetApplicationResourcesParams) WithApplicationsLte(applicationsLte *int64) *GetApplicationResourcesParams {
	o.SetApplicationsLte(applicationsLte)
	return o
}

// SetApplicationsLte adds the applicationsLte to the get application resources params
func (o *GetApplicationResourcesParams) SetApplicationsLte(applicationsLte *int64) {
	o.ApplicationsLte = applicationsLte
}

// WithCisDockerBenchmarkLevelGte adds the cisDockerBenchmarkLevelGte to the get application resources params
func (o *GetApplicationResourcesParams) WithCisDockerBenchmarkLevelGte(cisDockerBenchmarkLevelGte *string) *GetApplicationResourcesParams {
	o.SetCisDockerBenchmarkLevelGte(cisDockerBenchmarkLevelGte)
	return o
}

// SetCisDockerBenchmarkLevelGte adds the cisDockerBenchmarkLevelGte to the get application resources params
func (o *GetApplicationResourcesParams) SetCisDockerBenchmarkLevelGte(cisDockerBenchmarkLevelGte *string) {
	o.CisDockerBenchmarkLevelGte = cisDockerBenchmarkLevelGte
}

// WithCisDockerBenchmarkLevelLte adds the cisDockerBenchmarkLevelLte to the get application resources params
func (o *GetApplicationResourcesParams) WithCisDockerBenchmarkLevelLte(cisDockerBenchmarkLevelLte *string) *GetApplicationResourcesParams {
	o.SetCisDockerBenchmarkLevelLte(cisDockerBenchmarkLevelLte)
	return o
}

// SetCisDockerBenchmarkLevelLte adds the cisDockerBenchmarkLevelLte to the get application resources params
func (o *GetApplicationResourcesParams) SetCisDockerBenchmarkLevelLte(cisDockerBenchmarkLevelLte *string) {
	o.CisDockerBenchmarkLevelLte = cisDockerBenchmarkLevelLte
}

// WithCurrentRuntimeScan adds the currentRuntimeScan to the get application resources params
func (o *GetApplicationResourcesParams) WithCurrentRuntimeScan(currentRuntimeScan *bool) *GetApplicationResourcesParams {
	o.SetCurrentRuntimeScan(currentRuntimeScan)
	return o
}

// SetCurrentRuntimeScan adds the currentRuntimeScan to the get application resources params
func (o *GetApplicationResourcesParams) SetCurrentRuntimeScan(currentRuntimeScan *bool) {
	o.CurrentRuntimeScan = currentRuntimeScan
}

// WithPackageID adds the packageID to the get application resources params
func (o *GetApplicationResourcesParams) WithPackageID(packageID *string) *GetApplicationResourcesParams {
	o.SetPackageID(packageID)
	return o
}

// SetPackageID adds the packageId to the get application resources params
func (o *GetApplicationResourcesParams) SetPackageID(packageID *string) {
	o.PackageID = packageID
}

// WithPackagesGte adds the packagesGte to the get application resources params
func (o *GetApplicationResourcesParams) WithPackagesGte(packagesGte *int64) *GetApplicationResourcesParams {
	o.SetPackagesGte(packagesGte)
	return o
}

// SetPackagesGte adds the packagesGte to the get application resources params
func (o *GetApplicationResourcesParams) SetPackagesGte(packagesGte *int64) {
	o.PackagesGte = packagesGte
}

// WithPackagesIsNot adds the packagesIsNot to the get application resources params
func (o *GetApplicationResourcesParams) WithPackagesIsNot(packagesIsNot []int64) *GetApplicationResourcesParams {
	o.SetPackagesIsNot(packagesIsNot)
	return o
}

// SetPackagesIsNot adds the packagesIsNot to the get application resources params
func (o *GetApplicationResourcesParams) SetPackagesIsNot(packagesIsNot []int64) {
	o.PackagesIsNot = packagesIsNot
}

// WithPackagesIs adds the packagesIs to the get application resources params
func (o *GetApplicationResourcesParams) WithPackagesIs(packagesIs []int64) *GetApplicationResourcesParams {
	o.SetPackagesIs(packagesIs)
	return o
}

// SetPackagesIs adds the packagesIs to the get application resources params
func (o *GetApplicationResourcesParams) SetPackagesIs(packagesIs []int64) {
	o.PackagesIs = packagesIs
}

// WithPackagesLte adds the packagesLte to the get application resources params
func (o *GetApplicationResourcesParams) WithPackagesLte(packagesLte *int64) *GetApplicationResourcesParams {
	o.SetPackagesLte(packagesLte)
	return o
}

// SetPackagesLte adds the packagesLte to the get application resources params
func (o *GetApplicationResourcesParams) SetPackagesLte(packagesLte *int64) {
	o.PackagesLte = packagesLte
}

// WithPage adds the page to the get application resources params
func (o *GetApplicationResourcesParams) WithPage(page int64) *GetApplicationResourcesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get application resources params
func (o *GetApplicationResourcesParams) SetPage(page int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get application resources params
func (o *GetApplicationResourcesParams) WithPageSize(pageSize int64) *GetApplicationResourcesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get application resources params
func (o *GetApplicationResourcesParams) SetPageSize(pageSize int64) {
	o.PageSize = pageSize
}

// WithReportingSBOMAnalyzersContainElements adds the reportingSBOMAnalyzersContainElements to the get application resources params
func (o *GetApplicationResourcesParams) WithReportingSBOMAnalyzersContainElements(reportingSBOMAnalyzersContainElements []string) *GetApplicationResourcesParams {
	o.SetReportingSBOMAnalyzersContainElements(reportingSBOMAnalyzersContainElements)
	return o
}

// SetReportingSBOMAnalyzersContainElements adds the reportingSBOMAnalyzersContainElements to the get application resources params
func (o *GetApplicationResourcesParams) SetReportingSBOMAnalyzersContainElements(reportingSBOMAnalyzersContainElements []string) {
	o.ReportingSBOMAnalyzersContainElements = reportingSBOMAnalyzersContainElements
}

// WithReportingSBOMAnalyzersDoesntContainElements adds the reportingSBOMAnalyzersDoesntContainElements to the get application resources params
func (o *GetApplicationResourcesParams) WithReportingSBOMAnalyzersDoesntContainElements(reportingSBOMAnalyzersDoesntContainElements []string) *GetApplicationResourcesParams {
	o.SetReportingSBOMAnalyzersDoesntContainElements(reportingSBOMAnalyzersDoesntContainElements)
	return o
}

// SetReportingSBOMAnalyzersDoesntContainElements adds the reportingSBOMAnalyzersDoesntContainElements to the get application resources params
func (o *GetApplicationResourcesParams) SetReportingSBOMAnalyzersDoesntContainElements(reportingSBOMAnalyzersDoesntContainElements []string) {
	o.ReportingSBOMAnalyzersDoesntContainElements = reportingSBOMAnalyzersDoesntContainElements
}

// WithResourceHashContains adds the resourceHashContains to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceHashContains(resourceHashContains []string) *GetApplicationResourcesParams {
	o.SetResourceHashContains(resourceHashContains)
	return o
}

// SetResourceHashContains adds the resourceHashContains to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceHashContains(resourceHashContains []string) {
	o.ResourceHashContains = resourceHashContains
}

// WithResourceHashEnd adds the resourceHashEnd to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceHashEnd(resourceHashEnd *string) *GetApplicationResourcesParams {
	o.SetResourceHashEnd(resourceHashEnd)
	return o
}

// SetResourceHashEnd adds the resourceHashEnd to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceHashEnd(resourceHashEnd *string) {
	o.ResourceHashEnd = resourceHashEnd
}

// WithResourceHashIsNot adds the resourceHashIsNot to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceHashIsNot(resourceHashIsNot []string) *GetApplicationResourcesParams {
	o.SetResourceHashIsNot(resourceHashIsNot)
	return o
}

// SetResourceHashIsNot adds the resourceHashIsNot to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceHashIsNot(resourceHashIsNot []string) {
	o.ResourceHashIsNot = resourceHashIsNot
}

// WithResourceHashIs adds the resourceHashIs to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceHashIs(resourceHashIs []string) *GetApplicationResourcesParams {
	o.SetResourceHashIs(resourceHashIs)
	return o
}

// SetResourceHashIs adds the resourceHashIs to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceHashIs(resourceHashIs []string) {
	o.ResourceHashIs = resourceHashIs
}

// WithResourceHashStart adds the resourceHashStart to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceHashStart(resourceHashStart *string) *GetApplicationResourcesParams {
	o.SetResourceHashStart(resourceHashStart)
	return o
}

// SetResourceHashStart adds the resourceHashStart to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceHashStart(resourceHashStart *string) {
	o.ResourceHashStart = resourceHashStart
}

// WithResourceNameContains adds the resourceNameContains to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceNameContains(resourceNameContains []string) *GetApplicationResourcesParams {
	o.SetResourceNameContains(resourceNameContains)
	return o
}

// SetResourceNameContains adds the resourceNameContains to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceNameContains(resourceNameContains []string) {
	o.ResourceNameContains = resourceNameContains
}

// WithResourceNameEnd adds the resourceNameEnd to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceNameEnd(resourceNameEnd *string) *GetApplicationResourcesParams {
	o.SetResourceNameEnd(resourceNameEnd)
	return o
}

// SetResourceNameEnd adds the resourceNameEnd to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceNameEnd(resourceNameEnd *string) {
	o.ResourceNameEnd = resourceNameEnd
}

// WithResourceNameIsNot adds the resourceNameIsNot to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceNameIsNot(resourceNameIsNot []string) *GetApplicationResourcesParams {
	o.SetResourceNameIsNot(resourceNameIsNot)
	return o
}

// SetResourceNameIsNot adds the resourceNameIsNot to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceNameIsNot(resourceNameIsNot []string) {
	o.ResourceNameIsNot = resourceNameIsNot
}

// WithResourceNameIs adds the resourceNameIs to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceNameIs(resourceNameIs []string) *GetApplicationResourcesParams {
	o.SetResourceNameIs(resourceNameIs)
	return o
}

// SetResourceNameIs adds the resourceNameIs to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceNameIs(resourceNameIs []string) {
	o.ResourceNameIs = resourceNameIs
}

// WithResourceNameStart adds the resourceNameStart to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceNameStart(resourceNameStart *string) *GetApplicationResourcesParams {
	o.SetResourceNameStart(resourceNameStart)
	return o
}

// SetResourceNameStart adds the resourceNameStart to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceNameStart(resourceNameStart *string) {
	o.ResourceNameStart = resourceNameStart
}

// WithResourceTypeIs adds the resourceTypeIs to the get application resources params
func (o *GetApplicationResourcesParams) WithResourceTypeIs(resourceTypeIs []string) *GetApplicationResourcesParams {
	o.SetResourceTypeIs(resourceTypeIs)
	return o
}

// SetResourceTypeIs adds the resourceTypeIs to the get application resources params
func (o *GetApplicationResourcesParams) SetResourceTypeIs(resourceTypeIs []string) {
	o.ResourceTypeIs = resourceTypeIs
}

// WithSortDir adds the sortDir to the get application resources params
func (o *GetApplicationResourcesParams) WithSortDir(sortDir *string) *GetApplicationResourcesParams {
	o.SetSortDir(sortDir)
	return o
}

// SetSortDir adds the sortDir to the get application resources params
func (o *GetApplicationResourcesParams) SetSortDir(sortDir *string) {
	o.SortDir = sortDir
}

// WithSortKey adds the sortKey to the get application resources params
func (o *GetApplicationResourcesParams) WithSortKey(sortKey string) *GetApplicationResourcesParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the get application resources params
func (o *GetApplicationResourcesParams) SetSortKey(sortKey string) {
	o.SortKey = sortKey
}

// WithVulnerabilitySeverityGte adds the vulnerabilitySeverityGte to the get application resources params
func (o *GetApplicationResourcesParams) WithVulnerabilitySeverityGte(vulnerabilitySeverityGte *string) *GetApplicationResourcesParams {
	o.SetVulnerabilitySeverityGte(vulnerabilitySeverityGte)
	return o
}

// SetVulnerabilitySeverityGte adds the vulnerabilitySeverityGte to the get application resources params
func (o *GetApplicationResourcesParams) SetVulnerabilitySeverityGte(vulnerabilitySeverityGte *string) {
	o.VulnerabilitySeverityGte = vulnerabilitySeverityGte
}

// WithVulnerabilitySeverityLte adds the vulnerabilitySeverityLte to the get application resources params
func (o *GetApplicationResourcesParams) WithVulnerabilitySeverityLte(vulnerabilitySeverityLte *string) *GetApplicationResourcesParams {
	o.SetVulnerabilitySeverityLte(vulnerabilitySeverityLte)
	return o
}

// SetVulnerabilitySeverityLte adds the vulnerabilitySeverityLte to the get application resources params
func (o *GetApplicationResourcesParams) SetVulnerabilitySeverityLte(vulnerabilitySeverityLte *string) {
	o.VulnerabilitySeverityLte = vulnerabilitySeverityLte
}

// WriteToRequest writes these params to a swagger request
func (o *GetApplicationResourcesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationID != nil {

		// query param applicationID
		var qrApplicationID string

		if o.ApplicationID != nil {
			qrApplicationID = *o.ApplicationID
		}
		qApplicationID := qrApplicationID
		if qApplicationID != "" {

			if err := r.SetQueryParam("applicationID", qApplicationID); err != nil {
				return err
			}
		}
	}

	if o.ApplicationsGte != nil {

		// query param applications[gte]
		var qrApplicationsGte int64

		if o.ApplicationsGte != nil {
			qrApplicationsGte = *o.ApplicationsGte
		}
		qApplicationsGte := swag.FormatInt64(qrApplicationsGte)
		if qApplicationsGte != "" {

			if err := r.SetQueryParam("applications[gte]", qApplicationsGte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationsIsNot != nil {

		// binding items for applications[isNot]
		joinedApplicationsIsNot := o.bindParamApplicationsIsNot(reg)

		// query array param applications[isNot]
		if err := r.SetQueryParam("applications[isNot]", joinedApplicationsIsNot...); err != nil {
			return err
		}
	}

	if o.ApplicationsIs != nil {

		// binding items for applications[is]
		joinedApplicationsIs := o.bindParamApplicationsIs(reg)

		// query array param applications[is]
		if err := r.SetQueryParam("applications[is]", joinedApplicationsIs...); err != nil {
			return err
		}
	}

	if o.ApplicationsLte != nil {

		// query param applications[lte]
		var qrApplicationsLte int64

		if o.ApplicationsLte != nil {
			qrApplicationsLte = *o.ApplicationsLte
		}
		qApplicationsLte := swag.FormatInt64(qrApplicationsLte)
		if qApplicationsLte != "" {

			if err := r.SetQueryParam("applications[lte]", qApplicationsLte); err != nil {
				return err
			}
		}
	}

	if o.CisDockerBenchmarkLevelGte != nil {

		// query param cisDockerBenchmarkLevel[gte]
		var qrCisDockerBenchmarkLevelGte string

		if o.CisDockerBenchmarkLevelGte != nil {
			qrCisDockerBenchmarkLevelGte = *o.CisDockerBenchmarkLevelGte
		}
		qCisDockerBenchmarkLevelGte := qrCisDockerBenchmarkLevelGte
		if qCisDockerBenchmarkLevelGte != "" {

			if err := r.SetQueryParam("cisDockerBenchmarkLevel[gte]", qCisDockerBenchmarkLevelGte); err != nil {
				return err
			}
		}
	}

	if o.CisDockerBenchmarkLevelLte != nil {

		// query param cisDockerBenchmarkLevel[lte]
		var qrCisDockerBenchmarkLevelLte string

		if o.CisDockerBenchmarkLevelLte != nil {
			qrCisDockerBenchmarkLevelLte = *o.CisDockerBenchmarkLevelLte
		}
		qCisDockerBenchmarkLevelLte := qrCisDockerBenchmarkLevelLte
		if qCisDockerBenchmarkLevelLte != "" {

			if err := r.SetQueryParam("cisDockerBenchmarkLevel[lte]", qCisDockerBenchmarkLevelLte); err != nil {
				return err
			}
		}
	}

	if o.CurrentRuntimeScan != nil {

		// query param currentRuntimeScan
		var qrCurrentRuntimeScan bool

		if o.CurrentRuntimeScan != nil {
			qrCurrentRuntimeScan = *o.CurrentRuntimeScan
		}
		qCurrentRuntimeScan := swag.FormatBool(qrCurrentRuntimeScan)
		if qCurrentRuntimeScan != "" {

			if err := r.SetQueryParam("currentRuntimeScan", qCurrentRuntimeScan); err != nil {
				return err
			}
		}
	}

	if o.PackageID != nil {

		// query param packageID
		var qrPackageID string

		if o.PackageID != nil {
			qrPackageID = *o.PackageID
		}
		qPackageID := qrPackageID
		if qPackageID != "" {

			if err := r.SetQueryParam("packageID", qPackageID); err != nil {
				return err
			}
		}
	}

	if o.PackagesGte != nil {

		// query param packages[gte]
		var qrPackagesGte int64

		if o.PackagesGte != nil {
			qrPackagesGte = *o.PackagesGte
		}
		qPackagesGte := swag.FormatInt64(qrPackagesGte)
		if qPackagesGte != "" {

			if err := r.SetQueryParam("packages[gte]", qPackagesGte); err != nil {
				return err
			}
		}
	}

	if o.PackagesIsNot != nil {

		// binding items for packages[isNot]
		joinedPackagesIsNot := o.bindParamPackagesIsNot(reg)

		// query array param packages[isNot]
		if err := r.SetQueryParam("packages[isNot]", joinedPackagesIsNot...); err != nil {
			return err
		}
	}

	if o.PackagesIs != nil {

		// binding items for packages[is]
		joinedPackagesIs := o.bindParamPackagesIs(reg)

		// query array param packages[is]
		if err := r.SetQueryParam("packages[is]", joinedPackagesIs...); err != nil {
			return err
		}
	}

	if o.PackagesLte != nil {

		// query param packages[lte]
		var qrPackagesLte int64

		if o.PackagesLte != nil {
			qrPackagesLte = *o.PackagesLte
		}
		qPackagesLte := swag.FormatInt64(qrPackagesLte)
		if qPackagesLte != "" {

			if err := r.SetQueryParam("packages[lte]", qPackagesLte); err != nil {
				return err
			}
		}
	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" {

		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := swag.FormatInt64(qrPageSize)
	if qPageSize != "" {

		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	if o.ReportingSBOMAnalyzersContainElements != nil {

		// binding items for reportingSBOMAnalyzers[containElements]
		joinedReportingSBOMAnalyzersContainElements := o.bindParamReportingSBOMAnalyzersContainElements(reg)

		// query array param reportingSBOMAnalyzers[containElements]
		if err := r.SetQueryParam("reportingSBOMAnalyzers[containElements]", joinedReportingSBOMAnalyzersContainElements...); err != nil {
			return err
		}
	}

	if o.ReportingSBOMAnalyzersDoesntContainElements != nil {

		// binding items for reportingSBOMAnalyzers[doesntContainElements]
		joinedReportingSBOMAnalyzersDoesntContainElements := o.bindParamReportingSBOMAnalyzersDoesntContainElements(reg)

		// query array param reportingSBOMAnalyzers[doesntContainElements]
		if err := r.SetQueryParam("reportingSBOMAnalyzers[doesntContainElements]", joinedReportingSBOMAnalyzersDoesntContainElements...); err != nil {
			return err
		}
	}

	if o.ResourceHashContains != nil {

		// binding items for resourceHash[contains]
		joinedResourceHashContains := o.bindParamResourceHashContains(reg)

		// query array param resourceHash[contains]
		if err := r.SetQueryParam("resourceHash[contains]", joinedResourceHashContains...); err != nil {
			return err
		}
	}

	if o.ResourceHashEnd != nil {

		// query param resourceHash[end]
		var qrResourceHashEnd string

		if o.ResourceHashEnd != nil {
			qrResourceHashEnd = *o.ResourceHashEnd
		}
		qResourceHashEnd := qrResourceHashEnd
		if qResourceHashEnd != "" {

			if err := r.SetQueryParam("resourceHash[end]", qResourceHashEnd); err != nil {
				return err
			}
		}
	}

	if o.ResourceHashIsNot != nil {

		// binding items for resourceHash[isNot]
		joinedResourceHashIsNot := o.bindParamResourceHashIsNot(reg)

		// query array param resourceHash[isNot]
		if err := r.SetQueryParam("resourceHash[isNot]", joinedResourceHashIsNot...); err != nil {
			return err
		}
	}

	if o.ResourceHashIs != nil {

		// binding items for resourceHash[is]
		joinedResourceHashIs := o.bindParamResourceHashIs(reg)

		// query array param resourceHash[is]
		if err := r.SetQueryParam("resourceHash[is]", joinedResourceHashIs...); err != nil {
			return err
		}
	}

	if o.ResourceHashStart != nil {

		// query param resourceHash[start]
		var qrResourceHashStart string

		if o.ResourceHashStart != nil {
			qrResourceHashStart = *o.ResourceHashStart
		}
		qResourceHashStart := qrResourceHashStart
		if qResourceHashStart != "" {

			if err := r.SetQueryParam("resourceHash[start]", qResourceHashStart); err != nil {
				return err
			}
		}
	}

	if o.ResourceNameContains != nil {

		// binding items for resourceName[contains]
		joinedResourceNameContains := o.bindParamResourceNameContains(reg)

		// query array param resourceName[contains]
		if err := r.SetQueryParam("resourceName[contains]", joinedResourceNameContains...); err != nil {
			return err
		}
	}

	if o.ResourceNameEnd != nil {

		// query param resourceName[end]
		var qrResourceNameEnd string

		if o.ResourceNameEnd != nil {
			qrResourceNameEnd = *o.ResourceNameEnd
		}
		qResourceNameEnd := qrResourceNameEnd
		if qResourceNameEnd != "" {

			if err := r.SetQueryParam("resourceName[end]", qResourceNameEnd); err != nil {
				return err
			}
		}
	}

	if o.ResourceNameIsNot != nil {

		// binding items for resourceName[isNot]
		joinedResourceNameIsNot := o.bindParamResourceNameIsNot(reg)

		// query array param resourceName[isNot]
		if err := r.SetQueryParam("resourceName[isNot]", joinedResourceNameIsNot...); err != nil {
			return err
		}
	}

	if o.ResourceNameIs != nil {

		// binding items for resourceName[is]
		joinedResourceNameIs := o.bindParamResourceNameIs(reg)

		// query array param resourceName[is]
		if err := r.SetQueryParam("resourceName[is]", joinedResourceNameIs...); err != nil {
			return err
		}
	}

	if o.ResourceNameStart != nil {

		// query param resourceName[start]
		var qrResourceNameStart string

		if o.ResourceNameStart != nil {
			qrResourceNameStart = *o.ResourceNameStart
		}
		qResourceNameStart := qrResourceNameStart
		if qResourceNameStart != "" {

			if err := r.SetQueryParam("resourceName[start]", qResourceNameStart); err != nil {
				return err
			}
		}
	}

	if o.ResourceTypeIs != nil {

		// binding items for resourceType[is]
		joinedResourceTypeIs := o.bindParamResourceTypeIs(reg)

		// query array param resourceType[is]
		if err := r.SetQueryParam("resourceType[is]", joinedResourceTypeIs...); err != nil {
			return err
		}
	}

	if o.SortDir != nil {

		// query param sortDir
		var qrSortDir string

		if o.SortDir != nil {
			qrSortDir = *o.SortDir
		}
		qSortDir := qrSortDir
		if qSortDir != "" {

			if err := r.SetQueryParam("sortDir", qSortDir); err != nil {
				return err
			}
		}
	}

	// query param sortKey
	qrSortKey := o.SortKey
	qSortKey := qrSortKey
	if qSortKey != "" {

		if err := r.SetQueryParam("sortKey", qSortKey); err != nil {
			return err
		}
	}

	if o.VulnerabilitySeverityGte != nil {

		// query param vulnerabilitySeverity[gte]
		var qrVulnerabilitySeverityGte string

		if o.VulnerabilitySeverityGte != nil {
			qrVulnerabilitySeverityGte = *o.VulnerabilitySeverityGte
		}
		qVulnerabilitySeverityGte := qrVulnerabilitySeverityGte
		if qVulnerabilitySeverityGte != "" {

			if err := r.SetQueryParam("vulnerabilitySeverity[gte]", qVulnerabilitySeverityGte); err != nil {
				return err
			}
		}
	}

	if o.VulnerabilitySeverityLte != nil {

		// query param vulnerabilitySeverity[lte]
		var qrVulnerabilitySeverityLte string

		if o.VulnerabilitySeverityLte != nil {
			qrVulnerabilitySeverityLte = *o.VulnerabilitySeverityLte
		}
		qVulnerabilitySeverityLte := qrVulnerabilitySeverityLte
		if qVulnerabilitySeverityLte != "" {

			if err := r.SetQueryParam("vulnerabilitySeverity[lte]", qVulnerabilitySeverityLte); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetApplicationResources binds the parameter applications[isNot]
func (o *GetApplicationResourcesParams) bindParamApplicationsIsNot(formats strfmt.Registry) []string {
	applicationsIsNotIR := o.ApplicationsIsNot

	var applicationsIsNotIC []string
	for _, applicationsIsNotIIR := range applicationsIsNotIR { // explode []int64

		applicationsIsNotIIV := swag.FormatInt64(applicationsIsNotIIR) // int64 as string
		applicationsIsNotIC = append(applicationsIsNotIC, applicationsIsNotIIV)
	}

	// items.CollectionFormat: ""
	applicationsIsNotIS := swag.JoinByFormat(applicationsIsNotIC, "")

	return applicationsIsNotIS
}

// bindParamGetApplicationResources binds the parameter applications[is]
func (o *GetApplicationResourcesParams) bindParamApplicationsIs(formats strfmt.Registry) []string {
	applicationsIsIR := o.ApplicationsIs

	var applicationsIsIC []string
	for _, applicationsIsIIR := range applicationsIsIR { // explode []int64

		applicationsIsIIV := swag.FormatInt64(applicationsIsIIR) // int64 as string
		applicationsIsIC = append(applicationsIsIC, applicationsIsIIV)
	}

	// items.CollectionFormat: ""
	applicationsIsIS := swag.JoinByFormat(applicationsIsIC, "")

	return applicationsIsIS
}

// bindParamGetApplicationResources binds the parameter packages[isNot]
func (o *GetApplicationResourcesParams) bindParamPackagesIsNot(formats strfmt.Registry) []string {
	packagesIsNotIR := o.PackagesIsNot

	var packagesIsNotIC []string
	for _, packagesIsNotIIR := range packagesIsNotIR { // explode []int64

		packagesIsNotIIV := swag.FormatInt64(packagesIsNotIIR) // int64 as string
		packagesIsNotIC = append(packagesIsNotIC, packagesIsNotIIV)
	}

	// items.CollectionFormat: ""
	packagesIsNotIS := swag.JoinByFormat(packagesIsNotIC, "")

	return packagesIsNotIS
}

// bindParamGetApplicationResources binds the parameter packages[is]
func (o *GetApplicationResourcesParams) bindParamPackagesIs(formats strfmt.Registry) []string {
	packagesIsIR := o.PackagesIs

	var packagesIsIC []string
	for _, packagesIsIIR := range packagesIsIR { // explode []int64

		packagesIsIIV := swag.FormatInt64(packagesIsIIR) // int64 as string
		packagesIsIC = append(packagesIsIC, packagesIsIIV)
	}

	// items.CollectionFormat: ""
	packagesIsIS := swag.JoinByFormat(packagesIsIC, "")

	return packagesIsIS
}

// bindParamGetApplicationResources binds the parameter reportingSBOMAnalyzers[containElements]
func (o *GetApplicationResourcesParams) bindParamReportingSBOMAnalyzersContainElements(formats strfmt.Registry) []string {
	reportingSBOMAnalyzersContainElementsIR := o.ReportingSBOMAnalyzersContainElements

	var reportingSBOMAnalyzersContainElementsIC []string
	for _, reportingSBOMAnalyzersContainElementsIIR := range reportingSBOMAnalyzersContainElementsIR { // explode []string

		reportingSBOMAnalyzersContainElementsIIV := reportingSBOMAnalyzersContainElementsIIR // string as string
		reportingSBOMAnalyzersContainElementsIC = append(reportingSBOMAnalyzersContainElementsIC, reportingSBOMAnalyzersContainElementsIIV)
	}

	// items.CollectionFormat: ""
	reportingSBOMAnalyzersContainElementsIS := swag.JoinByFormat(reportingSBOMAnalyzersContainElementsIC, "")

	return reportingSBOMAnalyzersContainElementsIS
}

// bindParamGetApplicationResources binds the parameter reportingSBOMAnalyzers[doesntContainElements]
func (o *GetApplicationResourcesParams) bindParamReportingSBOMAnalyzersDoesntContainElements(formats strfmt.Registry) []string {
	reportingSBOMAnalyzersDoesntContainElementsIR := o.ReportingSBOMAnalyzersDoesntContainElements

	var reportingSBOMAnalyzersDoesntContainElementsIC []string
	for _, reportingSBOMAnalyzersDoesntContainElementsIIR := range reportingSBOMAnalyzersDoesntContainElementsIR { // explode []string

		reportingSBOMAnalyzersDoesntContainElementsIIV := reportingSBOMAnalyzersDoesntContainElementsIIR // string as string
		reportingSBOMAnalyzersDoesntContainElementsIC = append(reportingSBOMAnalyzersDoesntContainElementsIC, reportingSBOMAnalyzersDoesntContainElementsIIV)
	}

	// items.CollectionFormat: ""
	reportingSBOMAnalyzersDoesntContainElementsIS := swag.JoinByFormat(reportingSBOMAnalyzersDoesntContainElementsIC, "")

	return reportingSBOMAnalyzersDoesntContainElementsIS
}

// bindParamGetApplicationResources binds the parameter resourceHash[contains]
func (o *GetApplicationResourcesParams) bindParamResourceHashContains(formats strfmt.Registry) []string {
	resourceHashContainsIR := o.ResourceHashContains

	var resourceHashContainsIC []string
	for _, resourceHashContainsIIR := range resourceHashContainsIR { // explode []string

		resourceHashContainsIIV := resourceHashContainsIIR // string as string
		resourceHashContainsIC = append(resourceHashContainsIC, resourceHashContainsIIV)
	}

	// items.CollectionFormat: ""
	resourceHashContainsIS := swag.JoinByFormat(resourceHashContainsIC, "")

	return resourceHashContainsIS
}

// bindParamGetApplicationResources binds the parameter resourceHash[isNot]
func (o *GetApplicationResourcesParams) bindParamResourceHashIsNot(formats strfmt.Registry) []string {
	resourceHashIsNotIR := o.ResourceHashIsNot

	var resourceHashIsNotIC []string
	for _, resourceHashIsNotIIR := range resourceHashIsNotIR { // explode []string

		resourceHashIsNotIIV := resourceHashIsNotIIR // string as string
		resourceHashIsNotIC = append(resourceHashIsNotIC, resourceHashIsNotIIV)
	}

	// items.CollectionFormat: ""
	resourceHashIsNotIS := swag.JoinByFormat(resourceHashIsNotIC, "")

	return resourceHashIsNotIS
}

// bindParamGetApplicationResources binds the parameter resourceHash[is]
func (o *GetApplicationResourcesParams) bindParamResourceHashIs(formats strfmt.Registry) []string {
	resourceHashIsIR := o.ResourceHashIs

	var resourceHashIsIC []string
	for _, resourceHashIsIIR := range resourceHashIsIR { // explode []string

		resourceHashIsIIV := resourceHashIsIIR // string as string
		resourceHashIsIC = append(resourceHashIsIC, resourceHashIsIIV)
	}

	// items.CollectionFormat: ""
	resourceHashIsIS := swag.JoinByFormat(resourceHashIsIC, "")

	return resourceHashIsIS
}

// bindParamGetApplicationResources binds the parameter resourceName[contains]
func (o *GetApplicationResourcesParams) bindParamResourceNameContains(formats strfmt.Registry) []string {
	resourceNameContainsIR := o.ResourceNameContains

	var resourceNameContainsIC []string
	for _, resourceNameContainsIIR := range resourceNameContainsIR { // explode []string

		resourceNameContainsIIV := resourceNameContainsIIR // string as string
		resourceNameContainsIC = append(resourceNameContainsIC, resourceNameContainsIIV)
	}

	// items.CollectionFormat: ""
	resourceNameContainsIS := swag.JoinByFormat(resourceNameContainsIC, "")

	return resourceNameContainsIS
}

// bindParamGetApplicationResources binds the parameter resourceName[isNot]
func (o *GetApplicationResourcesParams) bindParamResourceNameIsNot(formats strfmt.Registry) []string {
	resourceNameIsNotIR := o.ResourceNameIsNot

	var resourceNameIsNotIC []string
	for _, resourceNameIsNotIIR := range resourceNameIsNotIR { // explode []string

		resourceNameIsNotIIV := resourceNameIsNotIIR // string as string
		resourceNameIsNotIC = append(resourceNameIsNotIC, resourceNameIsNotIIV)
	}

	// items.CollectionFormat: ""
	resourceNameIsNotIS := swag.JoinByFormat(resourceNameIsNotIC, "")

	return resourceNameIsNotIS
}

// bindParamGetApplicationResources binds the parameter resourceName[is]
func (o *GetApplicationResourcesParams) bindParamResourceNameIs(formats strfmt.Registry) []string {
	resourceNameIsIR := o.ResourceNameIs

	var resourceNameIsIC []string
	for _, resourceNameIsIIR := range resourceNameIsIR { // explode []string

		resourceNameIsIIV := resourceNameIsIIR // string as string
		resourceNameIsIC = append(resourceNameIsIC, resourceNameIsIIV)
	}

	// items.CollectionFormat: ""
	resourceNameIsIS := swag.JoinByFormat(resourceNameIsIC, "")

	return resourceNameIsIS
}

// bindParamGetApplicationResources binds the parameter resourceType[is]
func (o *GetApplicationResourcesParams) bindParamResourceTypeIs(formats strfmt.Registry) []string {
	resourceTypeIsIR := o.ResourceTypeIs

	var resourceTypeIsIC []string
	for _, resourceTypeIsIIR := range resourceTypeIsIR { // explode []string

		resourceTypeIsIIV := resourceTypeIsIIR // string as string
		resourceTypeIsIC = append(resourceTypeIsIC, resourceTypeIsIIV)
	}

	// items.CollectionFormat: ""
	resourceTypeIsIS := swag.JoinByFormat(resourceTypeIsIC, "")

	return resourceTypeIsIS
}
