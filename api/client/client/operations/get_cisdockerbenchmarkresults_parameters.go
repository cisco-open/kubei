// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCisdockerbenchmarkresultsParams creates a new GetCisdockerbenchmarkresultsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCisdockerbenchmarkresultsParams() *GetCisdockerbenchmarkresultsParams {
	return &GetCisdockerbenchmarkresultsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCisdockerbenchmarkresultsParamsWithTimeout creates a new GetCisdockerbenchmarkresultsParams object
// with the ability to set a timeout on a request.
func NewGetCisdockerbenchmarkresultsParamsWithTimeout(timeout time.Duration) *GetCisdockerbenchmarkresultsParams {
	return &GetCisdockerbenchmarkresultsParams{
		timeout: timeout,
	}
}

// NewGetCisdockerbenchmarkresultsParamsWithContext creates a new GetCisdockerbenchmarkresultsParams object
// with the ability to set a context for a request.
func NewGetCisdockerbenchmarkresultsParamsWithContext(ctx context.Context) *GetCisdockerbenchmarkresultsParams {
	return &GetCisdockerbenchmarkresultsParams{
		Context: ctx,
	}
}

// NewGetCisdockerbenchmarkresultsParamsWithHTTPClient creates a new GetCisdockerbenchmarkresultsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCisdockerbenchmarkresultsParamsWithHTTPClient(client *http.Client) *GetCisdockerbenchmarkresultsParams {
	return &GetCisdockerbenchmarkresultsParams{
		HTTPClient: client,
	}
}

/* GetCisdockerbenchmarkresultsParams contains all the parameters to send to the API endpoint
   for the get cisdockerbenchmarkresults operation.

   Typically these are written to a http.Request.
*/
type GetCisdockerbenchmarkresultsParams struct {

	/* ApplicationID.

	   application ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	ApplicationID *string

	/* ApplicationResourceID.

	   application resource ID system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	ApplicationResourceID *string

	/* ApplicationResourcesGte.

	   greater than or equal
	*/
	ApplicationResourcesGte *int64

	// ApplicationResourcesIsNot.
	ApplicationResourcesIsNot []int64

	// ApplicationResourcesIs.
	ApplicationResourcesIs []int64

	/* ApplicationResourcesLte.

	   less than or equal
	*/
	ApplicationResourcesLte *int64

	/* ApplicationsGte.

	   greater than or equal
	*/
	ApplicationsGte *int64

	// ApplicationsIsNot.
	ApplicationsIsNot []int64

	// ApplicationsIs.
	ApplicationsIs []int64

	/* ApplicationsLte.

	   less than or equal
	*/
	ApplicationsLte *int64

	// CisDockerBenchmarkLevelGte.
	CisDockerBenchmarkLevelGte *string

	// CisDockerBenchmarkLevelLte.
	CisDockerBenchmarkLevelLte *string

	/* CurrentRuntimeScan.

	   current runtime scan system filter, not visible to the user. only one of applicationID, applicationResourceID, packageID, currentRuntimeScan is allowed
	*/
	CurrentRuntimeScan *bool

	/* Page.

	   Page number of the query
	*/
	Page int64

	/* PageSize.

	   Maximum items to return
	*/
	PageSize int64

	/* SortDir.

	   Sorting direction

	   Default: "ASC"
	*/
	SortDir *string

	/* SortKey.

	   Sort key
	*/
	SortKey string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get cisdockerbenchmarkresults params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCisdockerbenchmarkresultsParams) WithDefaults() *GetCisdockerbenchmarkresultsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get cisdockerbenchmarkresults params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCisdockerbenchmarkresultsParams) SetDefaults() {
	var (
		sortDirDefault = string("ASC")
	)

	val := GetCisdockerbenchmarkresultsParams{
		SortDir: &sortDirDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithTimeout(timeout time.Duration) *GetCisdockerbenchmarkresultsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithContext(ctx context.Context) *GetCisdockerbenchmarkresultsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithHTTPClient(client *http.Client) *GetCisdockerbenchmarkresultsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithApplicationID adds the applicationID to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationID(applicationID *string) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationID(applicationID)
	return o
}

// SetApplicationID adds the applicationId to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationID(applicationID *string) {
	o.ApplicationID = applicationID
}

// WithApplicationResourceID adds the applicationResourceID to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationResourceID(applicationResourceID *string) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationResourceID(applicationResourceID)
	return o
}

// SetApplicationResourceID adds the applicationResourceId to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationResourceID(applicationResourceID *string) {
	o.ApplicationResourceID = applicationResourceID
}

// WithApplicationResourcesGte adds the applicationResourcesGte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationResourcesGte(applicationResourcesGte *int64) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationResourcesGte(applicationResourcesGte)
	return o
}

// SetApplicationResourcesGte adds the applicationResourcesGte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationResourcesGte(applicationResourcesGte *int64) {
	o.ApplicationResourcesGte = applicationResourcesGte
}

// WithApplicationResourcesIsNot adds the applicationResourcesIsNot to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationResourcesIsNot(applicationResourcesIsNot []int64) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationResourcesIsNot(applicationResourcesIsNot)
	return o
}

// SetApplicationResourcesIsNot adds the applicationResourcesIsNot to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationResourcesIsNot(applicationResourcesIsNot []int64) {
	o.ApplicationResourcesIsNot = applicationResourcesIsNot
}

// WithApplicationResourcesIs adds the applicationResourcesIs to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationResourcesIs(applicationResourcesIs []int64) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationResourcesIs(applicationResourcesIs)
	return o
}

// SetApplicationResourcesIs adds the applicationResourcesIs to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationResourcesIs(applicationResourcesIs []int64) {
	o.ApplicationResourcesIs = applicationResourcesIs
}

// WithApplicationResourcesLte adds the applicationResourcesLte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationResourcesLte(applicationResourcesLte *int64) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationResourcesLte(applicationResourcesLte)
	return o
}

// SetApplicationResourcesLte adds the applicationResourcesLte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationResourcesLte(applicationResourcesLte *int64) {
	o.ApplicationResourcesLte = applicationResourcesLte
}

// WithApplicationsGte adds the applicationsGte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationsGte(applicationsGte *int64) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationsGte(applicationsGte)
	return o
}

// SetApplicationsGte adds the applicationsGte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationsGte(applicationsGte *int64) {
	o.ApplicationsGte = applicationsGte
}

// WithApplicationsIsNot adds the applicationsIsNot to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationsIsNot(applicationsIsNot []int64) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationsIsNot(applicationsIsNot)
	return o
}

// SetApplicationsIsNot adds the applicationsIsNot to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationsIsNot(applicationsIsNot []int64) {
	o.ApplicationsIsNot = applicationsIsNot
}

// WithApplicationsIs adds the applicationsIs to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationsIs(applicationsIs []int64) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationsIs(applicationsIs)
	return o
}

// SetApplicationsIs adds the applicationsIs to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationsIs(applicationsIs []int64) {
	o.ApplicationsIs = applicationsIs
}

// WithApplicationsLte adds the applicationsLte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithApplicationsLte(applicationsLte *int64) *GetCisdockerbenchmarkresultsParams {
	o.SetApplicationsLte(applicationsLte)
	return o
}

// SetApplicationsLte adds the applicationsLte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetApplicationsLte(applicationsLte *int64) {
	o.ApplicationsLte = applicationsLte
}

// WithCisDockerBenchmarkLevelGte adds the cisDockerBenchmarkLevelGte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithCisDockerBenchmarkLevelGte(cisDockerBenchmarkLevelGte *string) *GetCisdockerbenchmarkresultsParams {
	o.SetCisDockerBenchmarkLevelGte(cisDockerBenchmarkLevelGte)
	return o
}

// SetCisDockerBenchmarkLevelGte adds the cisDockerBenchmarkLevelGte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetCisDockerBenchmarkLevelGte(cisDockerBenchmarkLevelGte *string) {
	o.CisDockerBenchmarkLevelGte = cisDockerBenchmarkLevelGte
}

// WithCisDockerBenchmarkLevelLte adds the cisDockerBenchmarkLevelLte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithCisDockerBenchmarkLevelLte(cisDockerBenchmarkLevelLte *string) *GetCisdockerbenchmarkresultsParams {
	o.SetCisDockerBenchmarkLevelLte(cisDockerBenchmarkLevelLte)
	return o
}

// SetCisDockerBenchmarkLevelLte adds the cisDockerBenchmarkLevelLte to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetCisDockerBenchmarkLevelLte(cisDockerBenchmarkLevelLte *string) {
	o.CisDockerBenchmarkLevelLte = cisDockerBenchmarkLevelLte
}

// WithCurrentRuntimeScan adds the currentRuntimeScan to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithCurrentRuntimeScan(currentRuntimeScan *bool) *GetCisdockerbenchmarkresultsParams {
	o.SetCurrentRuntimeScan(currentRuntimeScan)
	return o
}

// SetCurrentRuntimeScan adds the currentRuntimeScan to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetCurrentRuntimeScan(currentRuntimeScan *bool) {
	o.CurrentRuntimeScan = currentRuntimeScan
}

// WithPage adds the page to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithPage(page int64) *GetCisdockerbenchmarkresultsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetPage(page int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithPageSize(pageSize int64) *GetCisdockerbenchmarkresultsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetPageSize(pageSize int64) {
	o.PageSize = pageSize
}

// WithSortDir adds the sortDir to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithSortDir(sortDir *string) *GetCisdockerbenchmarkresultsParams {
	o.SetSortDir(sortDir)
	return o
}

// SetSortDir adds the sortDir to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetSortDir(sortDir *string) {
	o.SortDir = sortDir
}

// WithSortKey adds the sortKey to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) WithSortKey(sortKey string) *GetCisdockerbenchmarkresultsParams {
	o.SetSortKey(sortKey)
	return o
}

// SetSortKey adds the sortKey to the get cisdockerbenchmarkresults params
func (o *GetCisdockerbenchmarkresultsParams) SetSortKey(sortKey string) {
	o.SortKey = sortKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetCisdockerbenchmarkresultsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ApplicationID != nil {

		// query param applicationID
		var qrApplicationID string

		if o.ApplicationID != nil {
			qrApplicationID = *o.ApplicationID
		}
		qApplicationID := qrApplicationID
		if qApplicationID != "" {

			if err := r.SetQueryParam("applicationID", qApplicationID); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourceID != nil {

		// query param applicationResourceID
		var qrApplicationResourceID string

		if o.ApplicationResourceID != nil {
			qrApplicationResourceID = *o.ApplicationResourceID
		}
		qApplicationResourceID := qrApplicationResourceID
		if qApplicationResourceID != "" {

			if err := r.SetQueryParam("applicationResourceID", qApplicationResourceID); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourcesGte != nil {

		// query param applicationResources[gte]
		var qrApplicationResourcesGte int64

		if o.ApplicationResourcesGte != nil {
			qrApplicationResourcesGte = *o.ApplicationResourcesGte
		}
		qApplicationResourcesGte := swag.FormatInt64(qrApplicationResourcesGte)
		if qApplicationResourcesGte != "" {

			if err := r.SetQueryParam("applicationResources[gte]", qApplicationResourcesGte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationResourcesIsNot != nil {

		// binding items for applicationResources[isNot]
		joinedApplicationResourcesIsNot := o.bindParamApplicationResourcesIsNot(reg)

		// query array param applicationResources[isNot]
		if err := r.SetQueryParam("applicationResources[isNot]", joinedApplicationResourcesIsNot...); err != nil {
			return err
		}
	}

	if o.ApplicationResourcesIs != nil {

		// binding items for applicationResources[is]
		joinedApplicationResourcesIs := o.bindParamApplicationResourcesIs(reg)

		// query array param applicationResources[is]
		if err := r.SetQueryParam("applicationResources[is]", joinedApplicationResourcesIs...); err != nil {
			return err
		}
	}

	if o.ApplicationResourcesLte != nil {

		// query param applicationResources[lte]
		var qrApplicationResourcesLte int64

		if o.ApplicationResourcesLte != nil {
			qrApplicationResourcesLte = *o.ApplicationResourcesLte
		}
		qApplicationResourcesLte := swag.FormatInt64(qrApplicationResourcesLte)
		if qApplicationResourcesLte != "" {

			if err := r.SetQueryParam("applicationResources[lte]", qApplicationResourcesLte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationsGte != nil {

		// query param applications[gte]
		var qrApplicationsGte int64

		if o.ApplicationsGte != nil {
			qrApplicationsGte = *o.ApplicationsGte
		}
		qApplicationsGte := swag.FormatInt64(qrApplicationsGte)
		if qApplicationsGte != "" {

			if err := r.SetQueryParam("applications[gte]", qApplicationsGte); err != nil {
				return err
			}
		}
	}

	if o.ApplicationsIsNot != nil {

		// binding items for applications[isNot]
		joinedApplicationsIsNot := o.bindParamApplicationsIsNot(reg)

		// query array param applications[isNot]
		if err := r.SetQueryParam("applications[isNot]", joinedApplicationsIsNot...); err != nil {
			return err
		}
	}

	if o.ApplicationsIs != nil {

		// binding items for applications[is]
		joinedApplicationsIs := o.bindParamApplicationsIs(reg)

		// query array param applications[is]
		if err := r.SetQueryParam("applications[is]", joinedApplicationsIs...); err != nil {
			return err
		}
	}

	if o.ApplicationsLte != nil {

		// query param applications[lte]
		var qrApplicationsLte int64

		if o.ApplicationsLte != nil {
			qrApplicationsLte = *o.ApplicationsLte
		}
		qApplicationsLte := swag.FormatInt64(qrApplicationsLte)
		if qApplicationsLte != "" {

			if err := r.SetQueryParam("applications[lte]", qApplicationsLte); err != nil {
				return err
			}
		}
	}

	if o.CisDockerBenchmarkLevelGte != nil {

		// query param cisDockerBenchmarkLevel[gte]
		var qrCisDockerBenchmarkLevelGte string

		if o.CisDockerBenchmarkLevelGte != nil {
			qrCisDockerBenchmarkLevelGte = *o.CisDockerBenchmarkLevelGte
		}
		qCisDockerBenchmarkLevelGte := qrCisDockerBenchmarkLevelGte
		if qCisDockerBenchmarkLevelGte != "" {

			if err := r.SetQueryParam("cisDockerBenchmarkLevel[gte]", qCisDockerBenchmarkLevelGte); err != nil {
				return err
			}
		}
	}

	if o.CisDockerBenchmarkLevelLte != nil {

		// query param cisDockerBenchmarkLevel[lte]
		var qrCisDockerBenchmarkLevelLte string

		if o.CisDockerBenchmarkLevelLte != nil {
			qrCisDockerBenchmarkLevelLte = *o.CisDockerBenchmarkLevelLte
		}
		qCisDockerBenchmarkLevelLte := qrCisDockerBenchmarkLevelLte
		if qCisDockerBenchmarkLevelLte != "" {

			if err := r.SetQueryParam("cisDockerBenchmarkLevel[lte]", qCisDockerBenchmarkLevelLte); err != nil {
				return err
			}
		}
	}

	if o.CurrentRuntimeScan != nil {

		// query param currentRuntimeScan
		var qrCurrentRuntimeScan bool

		if o.CurrentRuntimeScan != nil {
			qrCurrentRuntimeScan = *o.CurrentRuntimeScan
		}
		qCurrentRuntimeScan := swag.FormatBool(qrCurrentRuntimeScan)
		if qCurrentRuntimeScan != "" {

			if err := r.SetQueryParam("currentRuntimeScan", qCurrentRuntimeScan); err != nil {
				return err
			}
		}
	}

	// query param page
	qrPage := o.Page
	qPage := swag.FormatInt64(qrPage)
	if qPage != "" {

		if err := r.SetQueryParam("page", qPage); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := swag.FormatInt64(qrPageSize)
	if qPageSize != "" {

		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	if o.SortDir != nil {

		// query param sortDir
		var qrSortDir string

		if o.SortDir != nil {
			qrSortDir = *o.SortDir
		}
		qSortDir := qrSortDir
		if qSortDir != "" {

			if err := r.SetQueryParam("sortDir", qSortDir); err != nil {
				return err
			}
		}
	}

	// query param sortKey
	qrSortKey := o.SortKey
	qSortKey := qrSortKey
	if qSortKey != "" {

		if err := r.SetQueryParam("sortKey", qSortKey); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetCisdockerbenchmarkresults binds the parameter applicationResources[isNot]
func (o *GetCisdockerbenchmarkresultsParams) bindParamApplicationResourcesIsNot(formats strfmt.Registry) []string {
	applicationResourcesIsNotIR := o.ApplicationResourcesIsNot

	var applicationResourcesIsNotIC []string
	for _, applicationResourcesIsNotIIR := range applicationResourcesIsNotIR { // explode []int64

		applicationResourcesIsNotIIV := swag.FormatInt64(applicationResourcesIsNotIIR) // int64 as string
		applicationResourcesIsNotIC = append(applicationResourcesIsNotIC, applicationResourcesIsNotIIV)
	}

	// items.CollectionFormat: ""
	applicationResourcesIsNotIS := swag.JoinByFormat(applicationResourcesIsNotIC, "")

	return applicationResourcesIsNotIS
}

// bindParamGetCisdockerbenchmarkresults binds the parameter applicationResources[is]
func (o *GetCisdockerbenchmarkresultsParams) bindParamApplicationResourcesIs(formats strfmt.Registry) []string {
	applicationResourcesIsIR := o.ApplicationResourcesIs

	var applicationResourcesIsIC []string
	for _, applicationResourcesIsIIR := range applicationResourcesIsIR { // explode []int64

		applicationResourcesIsIIV := swag.FormatInt64(applicationResourcesIsIIR) // int64 as string
		applicationResourcesIsIC = append(applicationResourcesIsIC, applicationResourcesIsIIV)
	}

	// items.CollectionFormat: ""
	applicationResourcesIsIS := swag.JoinByFormat(applicationResourcesIsIC, "")

	return applicationResourcesIsIS
}

// bindParamGetCisdockerbenchmarkresults binds the parameter applications[isNot]
func (o *GetCisdockerbenchmarkresultsParams) bindParamApplicationsIsNot(formats strfmt.Registry) []string {
	applicationsIsNotIR := o.ApplicationsIsNot

	var applicationsIsNotIC []string
	for _, applicationsIsNotIIR := range applicationsIsNotIR { // explode []int64

		applicationsIsNotIIV := swag.FormatInt64(applicationsIsNotIIR) // int64 as string
		applicationsIsNotIC = append(applicationsIsNotIC, applicationsIsNotIIV)
	}

	// items.CollectionFormat: ""
	applicationsIsNotIS := swag.JoinByFormat(applicationsIsNotIC, "")

	return applicationsIsNotIS
}

// bindParamGetCisdockerbenchmarkresults binds the parameter applications[is]
func (o *GetCisdockerbenchmarkresultsParams) bindParamApplicationsIs(formats strfmt.Registry) []string {
	applicationsIsIR := o.ApplicationsIs

	var applicationsIsIC []string
	for _, applicationsIsIIR := range applicationsIsIR { // explode []int64

		applicationsIsIIV := swag.FormatInt64(applicationsIsIIR) // int64 as string
		applicationsIsIC = append(applicationsIsIC, applicationsIsIIV)
	}

	// items.CollectionFormat: ""
	applicationsIsIS := swag.JoinByFormat(applicationsIsIC, "")

	return applicationsIsIS
}
